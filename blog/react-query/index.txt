3:I[5613,[],""]
5:I[31778,[],""]
6:I[70269,["250","static/chunks/250-f66e98452b80d3d3.js","185","static/chunks/app/layout-eeb53c07ffb10a3f.js"],"ThemeProvider"]
7:I[63186,["250","static/chunks/250-f66e98452b80d3d3.js","185","static/chunks/app/layout-eeb53c07ffb10a3f.js"],""]
8:I[69148,["250","static/chunks/250-f66e98452b80d3d3.js","185","static/chunks/app/layout-eeb53c07ffb10a3f.js"],""]
4:["slug","react-query","d"]
0:["954LdPQaywTCKaBHNCQQo",[[["",{"children":["blog",{"children":[["slug","react-query","d"],{"children":["__PAGE__?{\"slug\":\"react-query\"}",{}]}]}]},"$undefined","$undefined",true],["",{"children":["blog",{"children":[["slug","react-query","d"],{"children":["__PAGE__",{},["$L1","$L2",null]]},["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","blog","children","$4","children"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":[["$","link","0",{"rel":"stylesheet","href":"/my-blog/_next/static/css/a494df4e6249897d.css","precedence":"next","crossOrigin":""}]]}]]},["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","blog","children"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":null}]]},[null,["$","html",null,{"lang":"en","suppressHydrationWarning":true,"children":[["$","head",null,{"children":[["$","meta",null,{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","link",null,{"rel":"icon","href":"/favicon.ico"}]]}],["$","body",null,{"className":"bg-black text-white min-h-screen flex flex-col","children":["$","$L6",null,{"defaultTheme":"dark","children":["$","div",null,{"className":"flex flex-col min-h-screen","children":[["$","$L7",null,{}],["$","div",null,{"className":"flex-grow","children":["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":"404"}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],"notFoundStyles":[],"styles":null}]}],["$","$L8",null,{}]]}]}]}]]}],null]],[[["$","link","0",{"rel":"stylesheet","href":"/my-blog/_next/static/css/83cc0ea6f102b864.css","precedence":"next","crossOrigin":""}]],"$L9"]]]]
9:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","meta","1",{"charSet":"utf-8"}],["$","title","2",{"children":"Blog"}],["$","meta","3",{"name":"description","content":"A personal blog connected with Notion"}],["$","link","4",{"rel":"icon","href":"/my-blog/favicon.ico","type":"image/x-icon","sizes":"16x16"}]]
1:null
a:I[74366,["644","static/chunks/644-4de71cea8aeaed79.js","852","static/chunks/852-215445fe88778aae.js","308","static/chunks/app/blog/%5Bslug%5D/page-fab3f594c1476cf4.js"],"NotionRenderer"]
2:["$","main",null,{"className":"post-container","children":["$","article",null,{"className":"post-article","children":[null,["$","h1",null,{"className":"post-title","children":"React Query: Is It State or Just Data?"}],["$","div",null,{"className":"post-content","children":["$","$La",null,{"blocks":[{"id":"block-0","type":"paragraph","content":"React Query has taken the React world by storm. If you‚Äôve ever struggled with managing async data, caching, or synchronization between components, you‚Äôve probably heard someone say: ‚ÄúJust use React Query‚Äù.","properties":{}},{"id":"block-1","type":"paragraph","content":"But wait‚Äîif React Query handles your API data, is that still **state**? Or is it just **data**?","properties":{}},{"id":"block-2","type":"paragraph","content":"In this blog post, we‚Äôll explore what React Query does, what makes something ‚Äústate,‚Äù and how React Query fits into your mental model as a developer.","properties":{}},{"id":"block-3","type":"divider","content":"---","properties":{}},{"id":"block-4","type":"heading_2","content":"üß† What Does React Query Do?","properties":{}},{"id":"block-5","type":"paragraph","content":"React Query is a **data-fetching** library for React. It handles:","properties":{}},{"id":"block-6","type":"bulleted_list_item","content":"- ‚úÖ Fetching data from APIs","properties":{}},{"id":"block-7","type":"bulleted_list_item","content":"- ‚úÖ Caching","properties":{}},{"id":"block-8","type":"bulleted_list_item","content":"- ‚úÖ Synchronization across tabs/components","properties":{}},{"id":"block-9","type":"bulleted_list_item","content":"- ‚úÖ Automatic refetching (on focus, intervals, etc.)","properties":{}},{"id":"block-10","type":"bulleted_list_item","content":"- ‚úÖ Background updates","properties":{}},{"id":"block-11","type":"paragraph","content":"Here‚Äôs a simple example:","properties":{}},{"id":"block-12","type":"code","content":"```javascript\n`\nimport { useQuery } from '@tanstack/react-query';\n\nconst fetchUsers = async () => {\n  const res = await fetch('/api/users');\n  return res.json();\n};\n\nfunction Users() {\n  const { data, isLoading } = useQuery(['users'], fetchUsers);\n\n  if (isLoading) return <p>Loading...</p>;\n  return (\n    <ul>\n      {data.map(user => <li key={user.id}>{user.name}</li>)}\n    </ul>\n  );\n}\n`\n```","properties":{"language":"$undefined"}},{"id":"block-13","type":"paragraph","content":"Looks like a typical stateful component‚Ä¶ but is `data` really part of the **state**?","properties":{}},{"id":"block-14","type":"divider","content":"---","properties":{}},{"id":"block-15","type":"heading_2","content":"ü§î State vs Data: What‚Äôs the Difference?","properties":{}},{"id":"block-16","type":"paragraph","content":"Let‚Äôs clear this up:","properties":{}},{"id":"block-17","type":"table","content":"| Concept   | Definition                                                                                             |\n| --------- | ------------------------------------------------------------------------------------------------------ |\n| **State** | Data that your app creates or controls during a session. It usually changes based on user interaction. |\n| **Data**  | Information that comes from outside your app (like APIs). It's often static until refreshed.           |","properties":{}},{"id":"block-17-0","type":"table_row","content":"","properties":{}},{"id":"block-17-1","type":"table_row","content":"","properties":{}},{"id":"block-17-2","type":"table_row","content":"","properties":{}},{"id":"block-18","type":"paragraph","content":"In other words:","properties":{}},{"id":"block-19","type":"paragraph","content":"If you control it, it‚Äôs state. If the server controls it, it‚Äôs data.","properties":{}},{"id":"block-20","type":"paragraph","content":"React‚Äôs built-in `useState` or `useReducer` are perfect for managing local state: toggles, input values, modal visibility, form data, etc.","properties":{}},{"id":"block-21","type":"paragraph","content":"But for server responses? That‚Äôs where React Query shines.","properties":{}},{"id":"block-22","type":"divider","content":"---","properties":{}},{"id":"block-23","type":"heading_2","content":"üîÅ React Query Handles ‚ÄúServer State‚Äù","properties":{}},{"id":"block-24","type":"paragraph","content":"React Query isn‚Äôt a replacement for `useState`, `useReducer`, or Redux. It manages **server state**‚Äîdata that lives on the server but that your UI needs to reflect.","properties":{}},{"id":"block-25","type":"paragraph","content":"Why does this matter?","properties":{}},{"id":"block-26","type":"paragraph","content":"Because **server state is different** from local UI state:","properties":{}},{"id":"block-27","type":"table","content":"| Feature       | Local State (`useState`) | Server State (React Query)        |\n| ------------- | ------------------------ | --------------------------------- |\n| Controlled by | The component            | The server                        |\n| Source        | Local interactions       | Remote API                        |\n| Persistence   | Gone on refresh          | Can be cached, refetched          |\n| Updates       | Manual (setState)        | Automatic (refetch, invalidation) |","properties":{}},{"id":"block-27-0","type":"table_row","content":"","properties":{}},{"id":"block-27-1","type":"table_row","content":"","properties":{}},{"id":"block-27-2","type":"table_row","content":"","properties":{}},{"id":"block-27-3","type":"table_row","content":"","properties":{}},{"id":"block-27-4","type":"table_row","content":"","properties":{}},{"id":"block-28","type":"paragraph","content":"So when you use React Query, you're saying:","properties":{}},{"id":"block-29","type":"quote","content":"> ‚ÄúThis data belongs to the server. I want to consume it, not control it.‚Äù","properties":{}},{"id":"block-30","type":"divider","content":"---","properties":{}},{"id":"block-31","type":"heading_2","content":"‚öôÔ∏è So‚Ä¶ Is It State?","properties":{}},{"id":"block-32","type":"paragraph","content":"Yes and no.","properties":{}},{"id":"block-33","type":"paragraph","content":"React Query‚Äôs data is **stateful**‚Äîit can change over time, trigger re-renders, and live in memory.","properties":{}},{"id":"block-34","type":"paragraph","content":"But it‚Äôs **not React local state**. You don‚Äôt use `setData()` to update it manually. Instead, you:","properties":{}},{"id":"block-35","type":"bulleted_list_item","content":"- Let React Query fetch and cache it","properties":{}},{"id":"block-36","type":"bulleted_list_item","content":"- Use mutations or invalidations to trigger changes","properties":{}},{"id":"block-37","type":"bulleted_list_item","content":"- React to it using hooks like `useQuery` and `useMutation`","properties":{}},{"id":"block-38","type":"paragraph","content":"So we could say:","properties":{}},{"id":"block-39","type":"quote","content":"> React Query gives you data as state, but not your state.","properties":{}},{"id":"block-40","type":"divider","content":"---","properties":{}},{"id":"block-41","type":"heading_2","content":"üî• Why This Distinction Matters","properties":{}},{"id":"block-42","type":"paragraph","content":"Understanding the difference helps you:","properties":{}},{"id":"block-43","type":"bulleted_list_item","content":"- Choose the right tool: use `useState` for UI toggles, `useQuery` for API calls.","properties":{}},{"id":"block-44","type":"bulleted_list_item","content":"- Avoid over-engineering: you don't need Redux or context just to share data.","properties":{}},{"id":"block-45","type":"bulleted_list_item","content":"- Structure your app better: let each layer (UI vs data) handle what it‚Äôs best at.","properties":{}},{"id":"block-46","type":"divider","content":"---","properties":{}},{"id":"block-47","type":"heading_2","content":"‚úÖ Quick Recap","properties":{}},{"id":"block-48","type":"bulleted_list_item","content":"- ‚úÖ **State** is data you own and control (e.g., modal open/close, form inputs).","properties":{}},{"id":"block-49","type":"bulleted_list_item","content":"- ‚úÖ **Data** (especially from APIs) is best handled by tools like React Query.","properties":{}},{"id":"block-50","type":"bulleted_list_item","content":"- ‚úÖ React Query manages **server state**: it's stateful, but you're not manually setting it.","properties":{}},{"id":"block-51","type":"bulleted_list_item","content":"- ‚úÖ Use local state for UI behavior, and React Query for external data.","properties":{}},{"id":"block-52","type":"divider","content":"---","properties":{}},{"id":"block-53","type":"heading_2","content":"üí° Final Thoughts","properties":{}},{"id":"block-54","type":"paragraph","content":"React Query bridges the gap between your frontend and the backend. It gives you a structured, powerful way to handle **data that lives outside your app**, but that your app depends on.","properties":{}},{"id":"block-55","type":"paragraph","content":"You don‚Äôt need to pick between state and data, you just need to know **who owns it**.","properties":{}},{"id":"block-56","type":"paragraph","content":"If it comes from the server, treat it like data and let React Query manage it.","properties":{}},{"id":"block-57","type":"paragraph","content":"If it's based on user interaction, it probably belongs in local state.","properties":{}},{"id":"block-58","type":"paragraph","content":"Knowing the difference is key to writing clean, efficient React apps.","properties":{}}]}]}],["$","div",null,{"className":"post-meta","children":[["$","div",null,{"className":"post-date","children":[["$","svg",null,{"xmlns":"http://www.w3.org/2000/svg","width":24,"height":24,"viewBox":"0 0 24 24","fill":"none","stroke":"currentColor","strokeWidth":2,"strokeLinecap":"round","strokeLinejoin":"round","className":"lucide lucide-calendar h-4 w-4","children":[["$","rect","eu3xkr",{"width":"18","height":"18","x":"3","y":"4","rx":"2","ry":"2"}],["$","line","m3sa8f",{"x1":"16","x2":"16","y1":"2","y2":"6"}],["$","line","18kwsl",{"x1":"8","x2":"8","y1":"2","y2":"6"}],["$","line","xt86sb",{"x1":"3","x2":"21","y1":"10","y2":"10"}],"$undefined"]}],["$","span",null,{"children":"June 13, 2025"}]]}],["$","div",null,{"className":"post-tags","children":[["$","svg",null,{"xmlns":"http://www.w3.org/2000/svg","width":24,"height":24,"viewBox":"0 0 24 24","fill":"none","stroke":"currentColor","strokeWidth":2,"strokeLinecap":"round","strokeLinejoin":"round","className":"lucide lucide-tag h-4 w-4","children":[["$","path","14b2ls",{"d":"M12 2H2v10l9.29 9.29c.94.94 2.48.94 3.42 0l6.58-6.58c.94-.94.94-2.48 0-3.42L12 2Z"}],["$","path","7u93v4",{"d":"M7 7h.01"}],"$undefined"]}],["$","div",null,{"className":"flex gap-2","children":[["$","span","react",{"className":"post-tag","children":["#","react"]}],["$","span","JavaScript",{"className":"post-tag","children":["#","JavaScript"]}]]}]]}]]}]]}]}]
