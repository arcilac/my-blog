3:I[5613,[],""]
5:I[31778,[],""]
6:I[70269,["250","static/chunks/250-f66e98452b80d3d3.js","185","static/chunks/app/layout-eeb53c07ffb10a3f.js"],"ThemeProvider"]
7:I[63186,["250","static/chunks/250-f66e98452b80d3d3.js","185","static/chunks/app/layout-eeb53c07ffb10a3f.js"],""]
8:I[69148,["250","static/chunks/250-f66e98452b80d3d3.js","185","static/chunks/app/layout-eeb53c07ffb10a3f.js"],""]
4:["slug","managing-environments-dev-staging-prod","d"]
0:["954LdPQaywTCKaBHNCQQo",[[["",{"children":["blog",{"children":[["slug","managing-environments-dev-staging-prod","d"],{"children":["__PAGE__?{\"slug\":\"managing-environments-dev-staging-prod\"}",{}]}]}]},"$undefined","$undefined",true],["",{"children":["blog",{"children":[["slug","managing-environments-dev-staging-prod","d"],{"children":["__PAGE__",{},["$L1","$L2",null]]},["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","blog","children","$4","children"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":[["$","link","0",{"rel":"stylesheet","href":"/my-blog/_next/static/css/a494df4e6249897d.css","precedence":"next","crossOrigin":""}]]}]]},["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","blog","children"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":null}]]},[null,["$","html",null,{"lang":"en","suppressHydrationWarning":true,"children":[["$","head",null,{"children":[["$","meta",null,{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","link",null,{"rel":"icon","href":"/favicon.ico"}]]}],["$","body",null,{"className":"bg-black text-white min-h-screen flex flex-col","children":["$","$L6",null,{"defaultTheme":"dark","children":["$","div",null,{"className":"flex flex-col min-h-screen","children":[["$","$L7",null,{}],["$","div",null,{"className":"flex-grow","children":["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":"404"}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],"notFoundStyles":[],"styles":null}]}],["$","$L8",null,{}]]}]}]}]]}],null]],[[["$","link","0",{"rel":"stylesheet","href":"/my-blog/_next/static/css/83cc0ea6f102b864.css","precedence":"next","crossOrigin":""}]],"$L9"]]]]
9:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","meta","1",{"charSet":"utf-8"}],["$","title","2",{"children":"Blog"}],["$","meta","3",{"name":"description","content":"A personal blog connected with Notion"}],["$","link","4",{"rel":"icon","href":"/my-blog/favicon.ico","type":"image/x-icon","sizes":"16x16"}]]
1:null
a:I[74366,["644","static/chunks/644-4de71cea8aeaed79.js","852","static/chunks/852-215445fe88778aae.js","308","static/chunks/app/blog/%5Bslug%5D/page-fab3f594c1476cf4.js"],"NotionRenderer"]
2:["$","main",null,{"className":"post-container","children":["$","article",null,{"className":"post-article","children":[null,["$","h1",null,{"className":"post-title","children":"Managing Multiple Environments in an Application"}],["$","div",null,{"className":"post-content","children":["$","$La",null,{"blocks":[{"id":"block-0","type":"paragraph","content":"When building and maintaining modern applications, managing **multiple environments**‚Äîsuch as **development**, **staging**, and **production**‚Äîis essential for a stable and scalable workflow. Each environment serves a specific purpose, and separating them helps catch bugs early, test new features safely, and protect real user data.","properties":{}},{"id":"block-1","type":"paragraph","content":"In this article, we‚Äôll cover how to manage these environments effectively, especially in **Node.js** and full-stack projects.","properties":{}},{"id":"block-2","type":"divider","content":"---","properties":{}},{"id":"block-3","type":"heading_2","content":"üß© What Are Environments?","properties":{}},{"id":"block-4","type":"paragraph","content":"Environments are **isolated configurations** of your application that serve different stages of development:","properties":{}},{"id":"block-5","type":"bulleted_list_item","content":"- **Development (dev)**: Where developers work locally and experiment with features.","properties":{}},{"id":"block-6","type":"bulleted_list_item","content":"- **Staging**: A clone of production used for testing new releases.","properties":{}},{"id":"block-7","type":"bulleted_list_item","content":"- **Production (prod)**: The live version of your app that users interact with.","properties":{}},{"id":"block-8","type":"paragraph","content":"Each of these may have different:","properties":{}},{"id":"block-9","type":"bulleted_list_item","content":"- Databases","properties":{}},{"id":"block-10","type":"bulleted_list_item","content":"- API keys","properties":{}},{"id":"block-11","type":"bulleted_list_item","content":"- Feature toggles","properties":{}},{"id":"block-12","type":"bulleted_list_item","content":"- Logging levels","properties":{}},{"id":"block-13","type":"bulleted_list_item","content":"- Third-party integrations","properties":{}},{"id":"block-14","type":"divider","content":"---","properties":{}},{"id":"block-15","type":"heading_2","content":"üóÇÔ∏è Using Environment Variables","properties":{}},{"id":"block-16","type":"paragraph","content":"Environment variables are the foundation for managing different settings across environments. In Node.js, the `dotenv` package is commonly used to load variables from a `.env` file into `process.env`.","properties":{}},{"id":"block-17","type":"heading_3","content":"Example `.env` files","properties":{}},{"id":"block-18","type":"code","content":"```shell\n`\n# .env.development\nNODE_ENV=development\nDATABASE_URL=postgres://localhost/dev_db\nDEBUG=true\n`\n```","properties":{"language":"$undefined"}},{"id":"block-19","type":"code","content":"```shell\n`\n# .env.staging\nNODE_ENV=staging\nDATABASE_URL=postgres://staging-server/staging_db\nDEBUG=false\n\n`\n```","properties":{"language":"$undefined"}},{"id":"block-20","type":"code","content":"```shell\n`\n# .env.production\nNODE_ENV=production\nDATABASE_URL=postgres://prod-server/prod_db\nDEBUG=false\n\n`\n```","properties":{"language":"$undefined"}},{"id":"block-21","type":"heading_3","content":"Load with dotenv","properties":{}},{"id":"block-22","type":"code","content":"```javascript\n`\nimport dotenv from 'dotenv';\n\ndotenv.config({\n  path: `.env.${process.env.NODE_ENV || 'development'}`\n});\n\n`\n```","properties":{"language":"$undefined"}},{"id":"block-23","type":"paragraph","content":"Now you can access `process.env.DATABASE_URL` or any other variable based on the environment.","properties":{}},{"id":"block-24","type":"divider","content":"---","properties":{}},{"id":"block-25","type":"heading_2","content":"üèóÔ∏è Project Structure Tip","properties":{}},{"id":"block-26","type":"paragraph","content":"Organize your config logic cleanly with a `config.ts` or `config/index.ts` file:","properties":{}},{"id":"block-27","type":"code","content":"```javascript\n`\nexport const config = {\n  env: process.env.NODE_ENV || 'development',\n  port: process.env.PORT || 3000,\n  db: process.env.DATABASE_URL,\n  debug: process.env.DEBUG === 'true',\n};\n\n`\n```","properties":{"language":"$undefined"}},{"id":"block-28","type":"paragraph","content":"This way, your app uses a centralized, environment-aware config source.","properties":{}},{"id":"block-29","type":"divider","content":"---","properties":{}},{"id":"block-30","type":"heading_2","content":"üß™ Why Use a Staging Environment?","properties":{}},{"id":"block-31","type":"paragraph","content":"A **staging** environment simulates production as closely as possible. It allows your team to:","properties":{}},{"id":"block-32","type":"bulleted_list_item","content":"- Test deployments in a real-like environment","properties":{}},{"id":"block-33","type":"bulleted_list_item","content":"- Validate integrations (payments, auth, etc.)","properties":{}},{"id":"block-34","type":"bulleted_list_item","content":"- Conduct user acceptance testing (UAT)","properties":{}},{"id":"block-35","type":"bulleted_list_item","content":"- Avoid shipping bugs to real users","properties":{}},{"id":"block-36","type":"paragraph","content":"You can even connect staging to production-like data via snapshots or anonymized datasets.","properties":{}},{"id":"block-37","type":"divider","content":"---","properties":{}},{"id":"block-38","type":"heading_2","content":"üõ°Ô∏è Environment-Based Safeguards","properties":{}},{"id":"block-39","type":"paragraph","content":"Protect your app by applying logic depending on the environment:","properties":{}},{"id":"block-40","type":"code","content":"```javascript\n`\nif (config.env === 'production') {\n  app.use(compression()); // Enable performance middlewares only in prod\n}\n\nif (config.env !== 'production') {\n  app.use(require('morgan')('dev')); // Use request logger in dev\n}\n\n`\n```","properties":{"language":"$undefined"}},{"id":"block-41","type":"paragraph","content":"You can also block dangerous operations:","properties":{}},{"id":"block-42","type":"code","content":"```javascript\n`\nif (config.env === 'production') {\n  throw new Error('This operation is not allowed in production.');\n}\n\n`\n```","properties":{"language":"$undefined"}},{"id":"block-43","type":"divider","content":"---","properties":{}},{"id":"block-44","type":"heading_2","content":"üöÄ Deployment Tips","properties":{}},{"id":"block-45","type":"bulleted_list_item","content":"- Use environment-specific `.env` files or secrets managers like **AWS Secrets Manager**, **Doppler**, or **Vault**.","properties":{}},{"id":"block-46","type":"bulleted_list_item","content":"- In CI/CD pipelines (GitHub Actions, GitLab, etc.), inject the proper variables for each deploy stage.","properties":{}},{"id":"block-47","type":"bulleted_list_item","content":"- Document environment-specific behaviors in your README or a `docs/envs.md` file.","properties":{}},{"id":"block-48","type":"divider","content":"---","properties":{}},{"id":"block-49","type":"heading_2","content":"‚úÖ Summary Checklist","properties":{}},{"id":"block-50","type":"bulleted_list_item","content":"- Separate `.env` files for dev/staging/prod","properties":{}},{"id":"block-51","type":"bulleted_list_item","content":"- Load variables using `dotenv` or built-in tools (e.g., Vercel, Heroku env system)","properties":{}},{"id":"block-52","type":"bulleted_list_item","content":"- Centralize config in a `config` module","properties":{}},{"id":"block-53","type":"bulleted_list_item","content":"- Add safeguards for prod-only logic","properties":{}},{"id":"block-54","type":"bulleted_list_item","content":"- Use staging to test releases before going live","properties":{}},{"id":"block-55","type":"divider","content":"---","properties":{}},{"id":"block-56","type":"heading_2","content":"üß† Conclusion","properties":{}},{"id":"block-57","type":"paragraph","content":"Managing multiple environments is not just a backend thing‚Äîit's a professional practice that enables safe scaling, faster development, and reliable releases. By properly configuring and isolating your environments, you can minimize risks and give your team confidence at every stage of the development lifecycle.","properties":{}}]}]}],["$","div",null,{"className":"post-meta","children":[["$","div",null,{"className":"post-date","children":[["$","svg",null,{"xmlns":"http://www.w3.org/2000/svg","width":24,"height":24,"viewBox":"0 0 24 24","fill":"none","stroke":"currentColor","strokeWidth":2,"strokeLinecap":"round","strokeLinejoin":"round","className":"lucide lucide-calendar h-4 w-4","children":[["$","rect","eu3xkr",{"width":"18","height":"18","x":"3","y":"4","rx":"2","ry":"2"}],["$","line","m3sa8f",{"x1":"16","x2":"16","y1":"2","y2":"6"}],["$","line","18kwsl",{"x1":"8","x2":"8","y1":"2","y2":"6"}],["$","line","xt86sb",{"x1":"3","x2":"21","y1":"10","y2":"10"}],"$undefined"]}],["$","span",null,{"children":"May 16, 2025"}]]}],["$","div",null,{"className":"post-tags","children":[["$","svg",null,{"xmlns":"http://www.w3.org/2000/svg","width":24,"height":24,"viewBox":"0 0 24 24","fill":"none","stroke":"currentColor","strokeWidth":2,"strokeLinecap":"round","strokeLinejoin":"round","className":"lucide lucide-tag h-4 w-4","children":[["$","path","14b2ls",{"d":"M12 2H2v10l9.29 9.29c.94.94 2.48.94 3.42 0l6.58-6.58c.94-.94.94-2.48 0-3.42L12 2Z"}],["$","path","7u93v4",{"d":"M7 7h.01"}],"$undefined"]}],["$","div",null,{"className":"flex gap-2","children":[["$","span","Environments",{"className":"post-tag","children":["#","Environments"]}],["$","span","Best Practices",{"className":"post-tag","children":["#","Best Practices"]}]]}]]}]]}]]}]}]
