3:I[5613,[],""]
5:I[31778,[],""]
6:I[70269,["250","static/chunks/250-f66e98452b80d3d3.js","185","static/chunks/app/layout-eeb53c07ffb10a3f.js"],"ThemeProvider"]
7:I[63186,["250","static/chunks/250-f66e98452b80d3d3.js","185","static/chunks/app/layout-eeb53c07ffb10a3f.js"],""]
8:I[69148,["250","static/chunks/250-f66e98452b80d3d3.js","185","static/chunks/app/layout-eeb53c07ffb10a3f.js"],""]
4:["slug","pure-functions","d"]
0:["CWL7dW_ih9v5Clo9q1o-d",[[["",{"children":["blog",{"children":[["slug","pure-functions","d"],{"children":["__PAGE__?{\"slug\":\"pure-functions\"}",{}]}]}]},"$undefined","$undefined",true],["",{"children":["blog",{"children":[["slug","pure-functions","d"],{"children":["__PAGE__",{},["$L1","$L2",null]]},["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","blog","children","$4","children"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":[["$","link","0",{"rel":"stylesheet","href":"/my-blog/_next/static/css/a494df4e6249897d.css","precedence":"next","crossOrigin":""}]]}]]},["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","blog","children"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":null}]]},[null,["$","html",null,{"lang":"en","suppressHydrationWarning":true,"children":[["$","head",null,{"children":[["$","meta",null,{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","link",null,{"rel":"icon","href":"/favicon.ico"}]]}],["$","body",null,{"className":"bg-black text-white min-h-screen flex flex-col","children":["$","$L6",null,{"defaultTheme":"dark","children":["$","div",null,{"className":"flex flex-col min-h-screen","children":[["$","$L7",null,{}],["$","div",null,{"className":"flex-grow","children":["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":"404"}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],"notFoundStyles":[],"styles":null}]}],["$","$L8",null,{}]]}]}]}]]}],null]],[[["$","link","0",{"rel":"stylesheet","href":"/my-blog/_next/static/css/83cc0ea6f102b864.css","precedence":"next","crossOrigin":""}]],"$L9"]]]]
9:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","meta","1",{"charSet":"utf-8"}],["$","title","2",{"children":"Blog"}],["$","meta","3",{"name":"description","content":"A personal blog connected with Notion"}],["$","link","4",{"rel":"icon","href":"/my-blog/favicon.ico","type":"image/x-icon","sizes":"16x16"}]]
1:null
a:I[74366,["644","static/chunks/644-4de71cea8aeaed79.js","852","static/chunks/852-215445fe88778aae.js","308","static/chunks/app/blog/%5Bslug%5D/page-fab3f594c1476cf4.js"],"NotionRenderer"]
2:["$","main",null,{"className":"post-container","children":["$","article",null,{"className":"post-article","children":[null,["$","h1",null,{"className":"post-title","children":"Pure Functions in JavaScript: What, Why, and How"}],["$","div",null,{"className":"post-content","children":["$","$La",null,{"blocks":[{"id":"block-0","type":"paragraph","content":"As you dive deeper into JavaScript and functional programming, you'll hear a lot about **pure functions**. But what exactly makes a function _pure_, and why do developers care so much about them?","properties":{}},{"id":"block-1","type":"paragraph","content":"In this post, we'll break down what pure functions are, why they matter, and how to write them in JavaScript.","properties":{}},{"id":"block-2","type":"divider","content":"---","properties":{}},{"id":"block-3","type":"heading_2","content":"üßº What Is a Pure Function?","properties":{}},{"id":"block-4","type":"paragraph","content":"A **pure function** is a function that, given the same inputs, will _always_ return the same output and has **no side effects**.","properties":{}},{"id":"block-5","type":"paragraph","content":"In other words:","properties":{}},{"id":"block-6","type":"bulleted_list_item","content":"- ‚úÖ It doesn't change anything outside itself (no modifying global variables, DOM, or arguments)","properties":{}},{"id":"block-7","type":"bulleted_list_item","content":"- ‚úÖ It only depends on the inputs you give it","properties":{}},{"id":"block-8","type":"bulleted_list_item","content":"- ‚úÖ It‚Äôs predictable and testable","properties":{}},{"id":"block-9","type":"divider","content":"---","properties":{}},{"id":"block-10","type":"heading_2","content":"üö´ Impure vs ‚úÖ Pure Function Example","properties":{}},{"id":"block-11","type":"paragraph","content":"Let‚Äôs compare:","properties":{}},{"id":"block-12","type":"paragraph","content":"**Impure function:**","properties":{}},{"id":"block-13","type":"code","content":"```javascript\nlet counter = 0;\n\nfunction increment() {\n  counter++;\n  return counter;\n}\n```","properties":{"language":"$undefined"}},{"id":"block-14","type":"bulleted_list_item","content":"- ‚ùå Depends on external state (`counter`)","properties":{}},{"id":"block-15","type":"bulleted_list_item","content":"- ‚ùå Modifies that state","properties":{}},{"id":"block-16","type":"bulleted_list_item","content":"- ‚ùå Not predictable from just looking at the inputs","properties":{}},{"id":"block-17","type":"paragraph","content":"**Pure function:**","properties":{}},{"id":"block-18","type":"code","content":"```javascript\nfunction add(a, b) {\n  return a + b;\n}\n```","properties":{"language":"$undefined"}},{"id":"block-19","type":"bulleted_list_item","content":"- ‚úÖ Only depends on `a` and `b`","properties":{}},{"id":"block-20","type":"bulleted_list_item","content":"- ‚úÖ Doesn‚Äôt change anything outside","properties":{}},{"id":"block-21","type":"bulleted_list_item","content":"- ‚úÖ Same input = same output, every time","properties":{}},{"id":"block-22","type":"divider","content":"---","properties":{}},{"id":"block-23","type":"heading_2","content":"üîç Why Use Pure Functions?","properties":{}},{"id":"block-24","type":"paragraph","content":"Pure functions make your code:","properties":{}},{"id":"block-25","type":"bulleted_list_item","content":"- **Easier to test** ‚Äî no hidden state","properties":{}},{"id":"block-26","type":"bulleted_list_item","content":"- **Easier to debug** ‚Äî you know where things went wrong","properties":{}},{"id":"block-27","type":"bulleted_list_item","content":"- **Easier to reuse** ‚Äî they're self-contained","properties":{}},{"id":"block-28","type":"bulleted_list_item","content":"- **Safer for concurrency** ‚Äî no shared mutable state","properties":{}},{"id":"block-29","type":"paragraph","content":"They also play a big role in **functional programming** and libraries like Redux or RxJS.","properties":{}},{"id":"block-30","type":"divider","content":"---","properties":{}},{"id":"block-31","type":"heading_2","content":"üéØ Real-World Example","properties":{}},{"id":"block-32","type":"paragraph","content":"Let‚Äôs say you want to apply a discount:","properties":{}},{"id":"block-33","type":"code","content":"```javascript\n// Pure\nfunction applyDiscount(price, percentage) {\n  return price - price * (percentage / 100);\n}\n\n// Impure\nlet globalTax = 5;\n\nfunction applyTax(price) {\n  return price + price * (globalTax / 100);\n}\n```","properties":{"language":"$undefined"}},{"id":"block-34","type":"paragraph","content":"The pure version is easier to reason about and reuse. The impure version depends on `globalTax`, which could change.","properties":{}},{"id":"block-35","type":"divider","content":"---","properties":{}},{"id":"block-36","type":"heading_2","content":"‚ö†Ô∏è Common Pitfall: Mutating Inputs","properties":{}},{"id":"block-37","type":"paragraph","content":"Even if you don‚Äôt use globals, mutating the function‚Äôs input still breaks purity:","properties":{}},{"id":"block-38","type":"code","content":"```javascript\nfunction double(numbers) {\n  for (let i = 0; i < numbers.length; i++) {\n    numbers[i] *= 2;\n  }\n  return numbers;\n}\n```","properties":{"language":"$undefined"}},{"id":"block-39","type":"paragraph","content":"This mutates the original array. Instead, return a new one:","properties":{}},{"id":"block-40","type":"code","content":"```javascript\nfunction double(numbers) {\n  return numbers.map(n => n * 2);\n}\n```","properties":{"language":"$undefined"}},{"id":"block-41","type":"paragraph","content":"‚úÖ Now it‚Äôs pure.","properties":{}},{"id":"block-42","type":"divider","content":"---","properties":{}},{"id":"block-43","type":"heading_2","content":"‚úÖ Recap","properties":{}},{"id":"block-44","type":"bulleted_list_item","content":"- A **pure function**:","properties":{}},{"id":"block-44-0","type":"bulleted_list_item","content":"- Always gives the same output for the same input","properties":{}},{"id":"block-44-1","type":"bulleted_list_item","content":"- Has no side effects","properties":{}},{"id":"block-45","type":"bulleted_list_item","content":"- Avoid global state and mutations","properties":{}},{"id":"block-46","type":"bulleted_list_item","content":"- Pure functions are easier to test, debug, and maintain","properties":{}},{"id":"block-47","type":"divider","content":"---","properties":{}},{"id":"block-48","type":"heading_2","content":"üìå Conclusion","properties":{}},{"id":"block-49","type":"paragraph","content":"Pure functions are a small but powerful concept in JavaScript. They help you write code that‚Äôs predictable, modular, and easier to work with‚Äîespecially in large or complex applications.","properties":{}},{"id":"block-50","type":"paragraph","content":"Start simple: avoid side effects, don't mutate data, and focus on writing functions that do one thing well. Your future self (and teammates) will thank you.","properties":{}}]}]}],["$","div",null,{"className":"post-meta","children":[["$","div",null,{"className":"post-date","children":[["$","svg",null,{"xmlns":"http://www.w3.org/2000/svg","width":24,"height":24,"viewBox":"0 0 24 24","fill":"none","stroke":"currentColor","strokeWidth":2,"strokeLinecap":"round","strokeLinejoin":"round","className":"lucide lucide-calendar h-4 w-4","children":[["$","rect","eu3xkr",{"width":"18","height":"18","x":"3","y":"4","rx":"2","ry":"2"}],["$","line","m3sa8f",{"x1":"16","x2":"16","y1":"2","y2":"6"}],["$","line","18kwsl",{"x1":"8","x2":"8","y1":"2","y2":"6"}],["$","line","xt86sb",{"x1":"3","x2":"21","y1":"10","y2":"10"}],"$undefined"]}],["$","span",null,{"children":"June 21, 2025"}]]}],["$","div",null,{"className":"post-tags","children":[["$","svg",null,{"xmlns":"http://www.w3.org/2000/svg","width":24,"height":24,"viewBox":"0 0 24 24","fill":"none","stroke":"currentColor","strokeWidth":2,"strokeLinecap":"round","strokeLinejoin":"round","className":"lucide lucide-tag h-4 w-4","children":[["$","path","14b2ls",{"d":"M12 2H2v10l9.29 9.29c.94.94 2.48.94 3.42 0l6.58-6.58c.94-.94.94-2.48 0-3.42L12 2Z"}],["$","path","7u93v4",{"d":"M7 7h.01"}],"$undefined"]}],["$","div",null,{"className":"flex gap-2","children":[["$","span","funtions",{"className":"post-tag","children":["#","funtions"]}],["$","span","JavaScript",{"className":"post-tag","children":["#","JavaScript"]}]]}]]}]]}]]}]}]
