3:I[5613,[],""]
5:I[31778,[],""]
6:I[70269,["250","static/chunks/250-f66e98452b80d3d3.js","185","static/chunks/app/layout-eeb53c07ffb10a3f.js"],"ThemeProvider"]
7:I[63186,["250","static/chunks/250-f66e98452b80d3d3.js","185","static/chunks/app/layout-eeb53c07ffb10a3f.js"],""]
8:I[69148,["250","static/chunks/250-f66e98452b80d3d3.js","185","static/chunks/app/layout-eeb53c07ffb10a3f.js"],""]
4:["slug","react-typescript-project-structure","d"]
0:["CWL7dW_ih9v5Clo9q1o-d",[[["",{"children":["blog",{"children":[["slug","react-typescript-project-structure","d"],{"children":["__PAGE__?{\"slug\":\"react-typescript-project-structure\"}",{}]}]}]},"$undefined","$undefined",true],["",{"children":["blog",{"children":[["slug","react-typescript-project-structure","d"],{"children":["__PAGE__",{},["$L1","$L2",null]]},["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","blog","children","$4","children"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":[["$","link","0",{"rel":"stylesheet","href":"/my-blog/_next/static/css/a494df4e6249897d.css","precedence":"next","crossOrigin":""}]]}]]},["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","blog","children"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":null}]]},[null,["$","html",null,{"lang":"en","suppressHydrationWarning":true,"children":[["$","head",null,{"children":[["$","meta",null,{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","link",null,{"rel":"icon","href":"/favicon.ico"}]]}],["$","body",null,{"className":"bg-black text-white min-h-screen flex flex-col","children":["$","$L6",null,{"defaultTheme":"dark","children":["$","div",null,{"className":"flex flex-col min-h-screen","children":[["$","$L7",null,{}],["$","div",null,{"className":"flex-grow","children":["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":"404"}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],"notFoundStyles":[],"styles":null}]}],["$","$L8",null,{}]]}]}]}]]}],null]],[[["$","link","0",{"rel":"stylesheet","href":"/my-blog/_next/static/css/83cc0ea6f102b864.css","precedence":"next","crossOrigin":""}]],"$L9"]]]]
9:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","meta","1",{"charSet":"utf-8"}],["$","title","2",{"children":"Blog"}],["$","meta","3",{"name":"description","content":"A personal blog connected with Notion"}],["$","link","4",{"rel":"icon","href":"/my-blog/favicon.ico","type":"image/x-icon","sizes":"16x16"}]]
1:null
a:I[74366,["644","static/chunks/644-4de71cea8aeaed79.js","852","static/chunks/852-215445fe88778aae.js","308","static/chunks/app/blog/%5Bslug%5D/page-fab3f594c1476cf4.js"],"NotionRenderer"]
2:["$","main",null,{"className":"post-container","children":["$","article",null,{"className":"post-article","children":[null,["$","h1",null,{"className":"post-title","children":"How I Structure My Projects in React + TypeScript"}],["$","div",null,{"className":"post-content","children":["$","$La",null,{"blocks":[{"id":"block-0","type":"paragraph","content":"Maintaining a scalable and easy-to-understand codebase starts with a solid project structure. When working with **React + TypeScript**, a well-thought-out folder and file organization can make collaboration smoother and development faster.","properties":{}},{"id":"block-1","type":"paragraph","content":"Let me show you how I usually organize my projects and the reasoning behind each decision.","properties":{}},{"id":"block-2","type":"divider","content":"---","properties":{}},{"id":"block-3","type":"heading_3","content":"📁 Base Folder Structure","properties":{}},{"id":"block-4","type":"paragraph","content":"Here's a basic overview of how I structure most of my React + TypeScript apps:","properties":{}},{"id":"block-5","type":"code","content":"```graphql\n`\nsrc/\n│\n├── assets/         # Static files (images, icons, fonts)\n├── components/     # Reusable UI components\n├── features/       # Feature-based folders (each one contains logic + UI)\n├── hooks/          # Custom hooks\n├── pages/          # Route-level components (if using React Router or Next.js)\n├── services/       # API calls and business logic\n├── types/          # Global TypeScript types and interfaces\n├── utils/          # Utility functions and helpers\n├── constants/      # App-wide constants (enums, config, etc.)\n├── store/          # Redux, Zustand or any state management logic\n└── index.tsx       # App entry point\n\n`\n```","properties":{"language":"$undefined"}},{"id":"block-6","type":"divider","content":"---","properties":{}},{"id":"block-7","type":"heading_3","content":"🧩 Features Folder","properties":{}},{"id":"block-8","type":"paragraph","content":"Instead of a strict separation by type (e.g., all components in one place), I prefer a **feature-based approach**:","properties":{}},{"id":"block-9","type":"code","content":"```graphql\n`\nfeatures/\n└── auth/\n    ├── components/\n    ├── hooks/\n    ├── services/\n    ├── AuthPage.tsx\n    └── authSlice.ts\n\n`\n```","properties":{"language":"$undefined"}},{"id":"block-10","type":"paragraph","content":"This way, everything related to the `auth` feature is grouped together. It improves discoverability and reduces coupling between unrelated parts of the app.","properties":{}},{"id":"block-11","type":"divider","content":"---","properties":{}},{"id":"block-12","type":"heading_3","content":"📦 Components vs Features","properties":{}},{"id":"block-13","type":"paragraph","content":"Use `components/` for truly **reusable and dumb components** (e.g., `Button`, `Modal`, `Input`). These should not depend on any app-specific logic.","properties":{}},{"id":"block-14","type":"paragraph","content":"Use `features/` for **domain-specific components** that are tied to business logic.","properties":{}},{"id":"block-15","type":"divider","content":"---","properties":{}},{"id":"block-16","type":"heading_3","content":"🛠️ Services","properties":{}},{"id":"block-17","type":"paragraph","content":"Place your API calls, external integrations, or domain logic here:","properties":{}},{"id":"block-18","type":"code","content":"```javascript\n`\n// services/userService.ts\nexport const getUserById = async (id: string) => {\n  const response = await fetch(`/api/users/${id}`);\n  return response.json();\n};\n\n`\n```","properties":{"language":"$undefined"}},{"id":"block-19","type":"paragraph","content":"Group them by domain when needed (e.g., `authService`, `userService`, `reportService`).","properties":{}},{"id":"block-20","type":"divider","content":"---","properties":{}},{"id":"block-21","type":"heading_3","content":"✍️ Types and Interfaces","properties":{}},{"id":"block-22","type":"paragraph","content":"Define global types in `types/` and feature-specific ones inside the relevant feature folder:","properties":{}},{"id":"block-23","type":"code","content":"```javascript\n`\n// types/user.ts\nexport interface User {\n  id: string;\n  name: string;\n  email: string;\n}\n`\n```","properties":{"language":"$undefined"}},{"id":"block-24","type":"paragraph","content":"Or:","properties":{}},{"id":"block-25","type":"code","content":"```javascript\n`\n// features/reports/types.ts\nexport interface Report {\n  id: string;\n  createdAt: string;\n  data: ReportData;\n}\n\n`\n```","properties":{"language":"$undefined"}},{"id":"block-26","type":"divider","content":"---","properties":{}},{"id":"block-27","type":"heading_3","content":"⚙️ State Management (Optional)","properties":{}},{"id":"block-28","type":"paragraph","content":"If you're using a state management library like Redux or Zustand, place slices/stores under `store/`:","properties":{}},{"id":"block-29","type":"code","content":"```graphql\n`\nstore/\n├── index.ts         # Combine reducers or stores\n└── userSlice.ts\n`\n```","properties":{"language":"$undefined"}},{"id":"block-30","type":"paragraph","content":"Or colocate slices within the `features/` folder if they’re tightly scoped to that feature.","properties":{}},{"id":"block-31","type":"divider","content":"---","properties":{}},{"id":"block-32","type":"heading_3","content":"💡 Bonus Tips","properties":{}},{"id":"block-33","type":"bulleted_list_item","content":"- ✅ Use **barrel files** (`index.ts`) to simplify imports.","properties":{}},{"id":"block-34","type":"bulleted_list_item","content":"- ✅ Name files using **PascalCase** for components (`LoginPage.tsx`) and **camelCase** for utils (`formatDate.ts`).","properties":{}},{"id":"block-35","type":"bulleted_list_item","content":"- ✅ Keep styles close to the component (`Component.module.css` or styled-components).","properties":{}},{"id":"block-36","type":"bulleted_list_item","content":"- ✅ Prefer co-location: keep files that change together near each other.","properties":{}},{"id":"block-37","type":"divider","content":"---","properties":{}},{"id":"block-38","type":"heading_3","content":"✅ Summary","properties":{}},{"id":"block-39","type":"table","content":"| Folder        | Purpose                              |\n| ------------- | ------------------------------------ |\n| `components/` | Reusable UI components               |\n| `features/`   | Domain-specific logic and components |\n| `hooks/`      | Custom hooks                         |\n| `pages/`      | Route components                     |\n| `services/`   | API and business logic               |\n| `types/`      | TypeScript types and interfaces      |\n| `store/`      | State management logic               |\n| `utils/`      | Utility functions                    |\n| `assets/`     | Static files                         |","properties":{}},{"id":"block-39-0","type":"table_row","content":"","properties":{}},{"id":"block-39-1","type":"table_row","content":"","properties":{}},{"id":"block-39-2","type":"table_row","content":"","properties":{}},{"id":"block-39-3","type":"table_row","content":"","properties":{}},{"id":"block-39-4","type":"table_row","content":"","properties":{}},{"id":"block-39-5","type":"table_row","content":"","properties":{}},{"id":"block-39-6","type":"table_row","content":"","properties":{}},{"id":"block-39-7","type":"table_row","content":"","properties":{}},{"id":"block-39-8","type":"table_row","content":"","properties":{}},{"id":"block-39-9","type":"table_row","content":"","properties":{}},{"id":"block-40","type":"divider","content":"---","properties":{}},{"id":"block-41","type":"heading_3","content":"📌 Conclusion","properties":{}},{"id":"block-42","type":"paragraph","content":"There’s no “perfect” folder structure, but choosing one that prioritizes **clarity**, **scalability**, and **collaboration** makes a huge difference. Feature-based organization helps keep related code together, and TypeScript makes it easier to maintain consistency across your project.","properties":{}},{"id":"block-53","type":"paragraph","content":"","properties":{}}]}]}],["$","div",null,{"className":"post-meta","children":[["$","div",null,{"className":"post-date","children":[["$","svg",null,{"xmlns":"http://www.w3.org/2000/svg","width":24,"height":24,"viewBox":"0 0 24 24","fill":"none","stroke":"currentColor","strokeWidth":2,"strokeLinecap":"round","strokeLinejoin":"round","className":"lucide lucide-calendar h-4 w-4","children":[["$","rect","eu3xkr",{"width":"18","height":"18","x":"3","y":"4","rx":"2","ry":"2"}],["$","line","m3sa8f",{"x1":"16","x2":"16","y1":"2","y2":"6"}],["$","line","18kwsl",{"x1":"8","x2":"8","y1":"2","y2":"6"}],["$","line","xt86sb",{"x1":"3","x2":"21","y1":"10","y2":"10"}],"$undefined"]}],["$","span",null,{"children":"May 19, 2025"}]]}],["$","div",null,{"className":"post-tags","children":[["$","svg",null,{"xmlns":"http://www.w3.org/2000/svg","width":24,"height":24,"viewBox":"0 0 24 24","fill":"none","stroke":"currentColor","strokeWidth":2,"strokeLinecap":"round","strokeLinejoin":"round","className":"lucide lucide-tag h-4 w-4","children":[["$","path","14b2ls",{"d":"M12 2H2v10l9.29 9.29c.94.94 2.48.94 3.42 0l6.58-6.58c.94-.94.94-2.48 0-3.42L12 2Z"}],["$","path","7u93v4",{"d":"M7 7h.01"}],"$undefined"]}],["$","div",null,{"className":"flex gap-2","children":[["$","span","react",{"className":"post-tag","children":["#","react"]}],["$","span","TypeScript",{"className":"post-tag","children":["#","TypeScript"]}]]}]]}]]}]]}]}]
