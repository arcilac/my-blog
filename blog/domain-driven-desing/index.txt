3:I[5613,[],""]
5:I[31778,[],""]
6:I[70269,["250","static/chunks/250-f66e98452b80d3d3.js","185","static/chunks/app/layout-0afccb43f7c6e640.js"],"ThemeProvider"]
7:I[63186,["250","static/chunks/250-f66e98452b80d3d3.js","185","static/chunks/app/layout-0afccb43f7c6e640.js"],""]
8:I[69148,["250","static/chunks/250-f66e98452b80d3d3.js","185","static/chunks/app/layout-0afccb43f7c6e640.js"],""]
4:["slug","domain-driven-desing","d"]
0:["HIzOz3PQmqwg7eu-XUTx4",[[["",{"children":["blog",{"children":[["slug","domain-driven-desing","d"],{"children":["__PAGE__?{\"slug\":\"domain-driven-desing\"}",{}]}]}]},"$undefined","$undefined",true],["",{"children":["blog",{"children":[["slug","domain-driven-desing","d"],{"children":["__PAGE__",{},["$L1","$L2",null]]},["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","blog","children","$4","children"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":[["$","link","0",{"rel":"stylesheet","href":"/my-blog/_next/static/css/a494df4e6249897d.css","precedence":"next","crossOrigin":""}]]}]]},["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","blog","children"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":null}]]},[null,["$","html",null,{"lang":"en","suppressHydrationWarning":true,"children":[["$","head",null,{"children":[["$","meta",null,{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","link",null,{"rel":"icon","href":"/favicon.ico"}]]}],["$","body",null,{"className":"bg-black text-white min-h-screen flex flex-col","children":["$","$L6",null,{"defaultTheme":"dark","children":["$","div",null,{"className":"flex flex-col min-h-screen","children":[["$","$L7",null,{}],["$","div",null,{"className":"flex-grow","children":["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":"404"}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],"notFoundStyles":[],"styles":null}]}],["$","$L8",null,{}]]}]}]}]]}],null]],[[["$","link","0",{"rel":"stylesheet","href":"/my-blog/_next/static/css/83cc0ea6f102b864.css","precedence":"next","crossOrigin":""}]],"$L9"]]]]
9:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","meta","1",{"charSet":"utf-8"}],["$","title","2",{"children":"Blog"}],["$","meta","3",{"name":"description","content":"A personal blog connected with Notion"}],["$","link","4",{"rel":"icon","href":"/my-blog/favicon.ico","type":"image/x-icon","sizes":"16x16"}]]
1:null
a:I[74366,["644","static/chunks/644-4de71cea8aeaed79.js","852","static/chunks/852-215445fe88778aae.js","308","static/chunks/app/blog/%5Bslug%5D/page-e9a6f6be5ec41ed9.js"],"NotionRenderer"]
2:["$","main",null,{"className":"post-container","children":["$","article",null,{"className":"post-article","children":[null,["$","h1",null,{"className":"post-title","children":"Domain-driven Design (DDD) "}],["$","div",null,{"className":"post-content","children":["$","$La",null,{"blocks":[{"id":"block-0","type":"paragraph","content":"Complex business software gets messy fast. **Domain-Driven Design (DDD)** helps tame that complexity by modeling software around real-world business logic.","properties":{}},{"id":"block-1","type":"paragraph","content":"If you've worked on a project where business rules were scattered across controllers, services, and utility files, DDD offers a way to bring structure and clarity to your codebase.","properties":{}},{"id":"block-2","type":"divider","content":"---","properties":{}},{"id":"block-3","type":"heading_2","content":"🎯 What is Domain-Driven Design?","properties":{}},{"id":"block-4","type":"paragraph","content":"**DDD** is a software design philosophy introduced by Eric Evans. It focuses on:","properties":{}},{"id":"block-5","type":"bulleted_list_item","content":"- Understanding the **business domain** deeply","properties":{}},{"id":"block-6","type":"bulleted_list_item","content":"- Building a **domain model** that reflects real-world behavior","properties":{}},{"id":"block-7","type":"bulleted_list_item","content":"- Collaborating with **domain experts** to shape that model","properties":{}},{"id":"block-8","type":"bulleted_list_item","content":"- Organizing your system into **logical boundaries**","properties":{}},{"id":"block-9","type":"paragraph","content":"Instead of designing around tech (databases, APIs), DDD says: start from the **core problem** the business is solving.","properties":{}},{"id":"block-10","type":"divider","content":"---","properties":{}},{"id":"block-11","type":"heading_2","content":"🧠 Core concepts of DDD","properties":{}},{"id":"block-12","type":"heading_3","content":"1. **Domain**","properties":{}},{"id":"block-13","type":"paragraph","content":"The subject area your app models—e.g. e-commerce, banking, logistics. It includes business rules, vocabulary, and workflows.","properties":{}},{"id":"block-14","type":"heading_3","content":"2. **Ubiquitous language**","properties":{}},{"id":"block-15","type":"paragraph","content":"A **shared language** used by both developers and business experts. If stakeholders say \"customer places order,\" your code should reflect that: `Customer.placeOrder()`.","properties":{}},{"id":"block-16","type":"heading_3","content":"3. **Bounded context**","properties":{}},{"id":"block-17","type":"paragraph","content":"A boundary within which a particular model applies. For example, an `Order` in **Sales** might mean something different than an `Order` in **Shipping`.","properties":{}},{"id":"block-18","type":"heading_3","content":"4. **Domain model**","properties":{}},{"id":"block-19","type":"paragraph","content":"The part of your codebase that captures business behavior—not just data, but **rules**, **decisions**, and **interactions**.","properties":{}},{"id":"block-20","type":"divider","content":"---","properties":{}},{"id":"block-21","type":"heading_2","content":"🧱 Building blocks of DDD","properties":{}},{"id":"block-22","type":"table","content":"| Building block     | Description                                    | Example (E-commerce)      |\n| ------------------ | ---------------------------------------------- | ------------------------- |\n| **Entity**         | Has identity and lifecycle                     | `Customer`, `Order`       |\n| **Value object**   | Immutable, compared by value                   | `Email`, `Money`, `Price` |\n| **Aggregate**      | Entity + related objects as a consistency unit | `Order` + `OrderItems`    |\n| **Repository**     | Abstracts persistence                          | `OrderRepository`         |\n| **Domain service** | Domain logic not belonging to any entity       | `PriceCalculator`         |\n| **Domain event**   | Significant domain action that occurred        | `OrderConfirmed`          |","properties":{}},{"id":"block-22-0","type":"table_row","content":"","properties":{}},{"id":"block-22-1","type":"table_row","content":"","properties":{}},{"id":"block-22-2","type":"table_row","content":"","properties":{}},{"id":"block-22-3","type":"table_row","content":"","properties":{}},{"id":"block-22-4","type":"table_row","content":"","properties":{}},{"id":"block-22-5","type":"table_row","content":"","properties":{}},{"id":"block-22-6","type":"table_row","content":"","properties":{}},{"id":"block-23","type":"divider","content":"---","properties":{}},{"id":"block-24","type":"heading_2","content":"🛒 A quick example","properties":{}},{"id":"block-25","type":"paragraph","content":"Imagine you're building an online store. Here's how DDD might shape your `Order` aggregate:","properties":{}},{"id":"block-26","type":"code","content":"```javascript\nfunction createOrder({ id, customerId }) {\n  const items = [];\n  let status = 'PENDING';\n\n  function addItem(productId, quantity, price) {\n    if (status !== 'PENDING') throw new Error('Cannot modify confirmed order');\n    items.push({ productId, quantity, price });\n  }\n\n  function confirm() {\n    if (items.length === 0) throw new Error('Cannot confirm empty order');\n    status = 'CONFIRMED';\n    // Emit OrderConfirmed event here\n  }\n\n  return { id, customerId, items, status, addItem, confirm };\n}\n```","properties":{"language":"$undefined"}},{"id":"block-27","type":"paragraph","content":"This object enforces **business rules**, not just data shape. That’s the key difference with traditional CRUD.","properties":{}},{"id":"block-28","type":"divider","content":"---","properties":{}},{"id":"block-29","type":"heading_2","content":"🏛️ Layered Architecture in DDD","properties":{}},{"id":"block-30","type":"paragraph","content":"A typical DDD-based system is organized into layers:","properties":{}},{"id":"block-31","type":"table","content":"| Layer              | Responsibility                                     |\n| ------------------ | -------------------------------------------------- |\n| **Presentation**   | HTTP handlers, APIs, UI                            |\n| **Application**    | Use cases, coordination between components         |\n| **Domain**         | Business logic (entities, value objects, services) |\n| **Infrastructure** | Technical details (DB, queues, APIs, etc.)         |","properties":{}},{"id":"block-31-0","type":"table_row","content":"","properties":{}},{"id":"block-31-1","type":"table_row","content":"","properties":{}},{"id":"block-31-2","type":"table_row","content":"","properties":{}},{"id":"block-31-3","type":"table_row","content":"","properties":{}},{"id":"block-31-4","type":"table_row","content":"","properties":{}},{"id":"block-32","type":"paragraph","content":"Only the **domain layer** knows about your business logic. Everything else supports it.","properties":{}},{"id":"block-33","type":"divider","content":"---","properties":{}},{"id":"block-34","type":"heading_2","content":"✅ Benefits of DDD","properties":{}},{"id":"block-35","type":"bulleted_list_item","content":"- ✅ Reflects real business processes in code","properties":{}},{"id":"block-36","type":"bulleted_list_item","content":"- ✅ Aligns dev and business teams through shared language","properties":{}},{"id":"block-37","type":"bulleted_list_item","content":"- ✅ Scales better as complexity grows","properties":{}},{"id":"block-38","type":"bulleted_list_item","content":"- ✅ Keeps business logic testable and isolated","properties":{}},{"id":"block-39","type":"bulleted_list_item","content":"- ✅ Encourages modular, loosely coupled design","properties":{}},{"id":"block-40","type":"divider","content":"---","properties":{}},{"id":"block-41","type":"heading_2","content":"⚠️ When NOT to Use DDD","properties":{}},{"id":"block-42","type":"paragraph","content":"DDD is powerful, but it’s not for every project.","properties":{}},{"id":"block-43","type":"paragraph","content":"Avoid DDD if you’re building:","properties":{}},{"id":"block-44","type":"bulleted_list_item","content":"- 🔹 A simple CRUD app with no complex logic","properties":{}},{"id":"block-45","type":"bulleted_list_item","content":"- 🔹 A small internal tool with tight deadlines","properties":{}},{"id":"block-46","type":"bulleted_list_item","content":"- 🔹 A prototype or one-off utility","properties":{}},{"id":"block-47","type":"bulleted_list_item","content":"- 🔹 A highly technical tool with minimal business rules","properties":{}},{"id":"block-48","type":"paragraph","content":"Use DDD when **the domain is complex enough to deserve it**.","properties":{}},{"id":"block-49","type":"divider","content":"---","properties":{}},{"id":"block-50","type":"heading_2","content":"🚀 Getting Started with DDD","properties":{}},{"id":"block-51","type":"paragraph","content":"Here’s how to begin applying DDD in a real project:","properties":{}},{"id":"block-52","type":"numbered_list_item","content":"1. **Talk to domain experts** – learn the real business rules","properties":{}},{"id":"block-53","type":"numbered_list_item","content":"2. **Identify bounded contexts** – divide the domain into logical areas","properties":{}},{"id":"block-54","type":"numbered_list_item","content":"3. **Model entities and value objects** – enforce invariants in code","properties":{}},{"id":"block-55","type":"numbered_list_item","content":"4. **Create aggregates** – manage consistency across related data","properties":{}},{"id":"block-56","type":"numbered_list_item","content":"5. **Use repositories** – abstract away storage details","properties":{}},{"id":"block-57","type":"numbered_list_item","content":"6. **Emit domain events** – capture meaningful business changes","properties":{}},{"id":"block-58","type":"numbered_list_item","content":"7. **Protect your domain layer** – keep it free of technical details","properties":{}},{"id":"block-59","type":"divider","content":"---","properties":{}},{"id":"block-60","type":"heading_2","content":"🛠️ Tools and Frameworks (Optional)","properties":{}},{"id":"block-61","type":"paragraph","content":"DDD is methodology, not tech—but some tools can help:","properties":{}},{"id":"block-62","type":"table","content":"| Language      | Tools / Libraries                |\n| ------------- | -------------------------------- |\n| TypeScript/JS | NestJS, Zod, TypeORM, EventStore |\n| Java          | Spring Boot, Axon, JPA           |\n| C#            | .NET Core, MediatR, EF Core      |\n| Python        | FastAPI, SQLAlchemy, Pydantic    |","properties":{}},{"id":"block-62-0","type":"table_row","content":"","properties":{}},{"id":"block-62-1","type":"table_row","content":"","properties":{}},{"id":"block-62-2","type":"table_row","content":"","properties":{}},{"id":"block-62-3","type":"table_row","content":"","properties":{}},{"id":"block-62-4","type":"table_row","content":"","properties":{}},{"id":"block-63","type":"paragraph","content":"Use what helps you model the domain cleanly—don’t force tools into the design.","properties":{}},{"id":"block-64","type":"divider","content":"---","properties":{}},{"id":"block-65","type":"heading_2","content":"🧠 Conclusion","properties":{}},{"id":"block-66","type":"paragraph","content":"**Domain-Driven Design** isn’t about complexity—it’s about clarity.","properties":{}},{"id":"block-67","type":"paragraph","content":"It helps you build software that matches how the business actually works, with language and logic everyone can understand. When your domain is complex and evolving, DDD gives you the structure to grow confidently.","properties":{}},{"id":"block-68","type":"paragraph","content":"Don’t apply DDD because it’s trendy—apply it because your problem deserves it.","properties":{}},{"id":"block-69","type":"paragraph","content":"Start with the core domain. Let everything else support it.","properties":{}}]}]}],["$","div",null,{"className":"post-meta","children":[["$","div",null,{"className":"post-date","children":[["$","svg",null,{"xmlns":"http://www.w3.org/2000/svg","width":24,"height":24,"viewBox":"0 0 24 24","fill":"none","stroke":"currentColor","strokeWidth":2,"strokeLinecap":"round","strokeLinejoin":"round","className":"lucide lucide-calendar h-4 w-4","children":[["$","rect","eu3xkr",{"width":"18","height":"18","x":"3","y":"4","rx":"2","ry":"2"}],["$","line","m3sa8f",{"x1":"16","x2":"16","y1":"2","y2":"6"}],["$","line","18kwsl",{"x1":"8","x2":"8","y1":"2","y2":"6"}],["$","line","xt86sb",{"x1":"3","x2":"21","y1":"10","y2":"10"}],"$undefined"]}],["$","span",null,{"children":"July 11, 2025"}]]}],["$","div",null,{"className":"post-tags","children":[["$","svg",null,{"xmlns":"http://www.w3.org/2000/svg","width":24,"height":24,"viewBox":"0 0 24 24","fill":"none","stroke":"currentColor","strokeWidth":2,"strokeLinecap":"round","strokeLinejoin":"round","className":"lucide lucide-tag h-4 w-4","children":[["$","path","14b2ls",{"d":"M12 2H2v10l9.29 9.29c.94.94 2.48.94 3.42 0l6.58-6.58c.94-.94.94-2.48 0-3.42L12 2Z"}],["$","path","7u93v4",{"d":"M7 7h.01"}],"$undefined"]}],["$","div",null,{"className":"flex gap-2","children":[["$","span","DDD",{"className":"post-tag","children":["#","DDD"]}],["$","span","JavaScript",{"className":"post-tag","children":["#","JavaScript"]}]]}]]}]]}]]}]}]
