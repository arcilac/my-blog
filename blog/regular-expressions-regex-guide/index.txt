3:I[5613,[],""]
5:I[31778,[],""]
6:I[70269,["250","static/chunks/250-f66e98452b80d3d3.js","185","static/chunks/app/layout-eeb53c07ffb10a3f.js"],"ThemeProvider"]
7:I[63186,["250","static/chunks/250-f66e98452b80d3d3.js","185","static/chunks/app/layout-eeb53c07ffb10a3f.js"],""]
8:I[69148,["250","static/chunks/250-f66e98452b80d3d3.js","185","static/chunks/app/layout-eeb53c07ffb10a3f.js"],""]
4:["slug","regular-expressions-regex-guide","d"]
0:["6PJ0KbyGIdJvgwrODRBpQ",[[["",{"children":["blog",{"children":[["slug","regular-expressions-regex-guide","d"],{"children":["__PAGE__?{\"slug\":\"regular-expressions-regex-guide\"}",{}]}]}]},"$undefined","$undefined",true],["",{"children":["blog",{"children":[["slug","regular-expressions-regex-guide","d"],{"children":["__PAGE__",{},["$L1","$L2",null]]},["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","blog","children","$4","children"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":[["$","link","0",{"rel":"stylesheet","href":"/my-blog/_next/static/css/a494df4e6249897d.css","precedence":"next","crossOrigin":""}]]}]]},["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","blog","children"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":null}]]},[null,["$","html",null,{"lang":"en","suppressHydrationWarning":true,"children":[["$","head",null,{"children":[["$","meta",null,{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","link",null,{"rel":"icon","href":"/favicon.ico"}]]}],["$","body",null,{"className":"bg-black text-white min-h-screen flex flex-col","children":["$","$L6",null,{"defaultTheme":"dark","children":["$","div",null,{"className":"flex flex-col min-h-screen","children":[["$","$L7",null,{}],["$","div",null,{"className":"flex-grow","children":["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":"404"}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],"notFoundStyles":[],"styles":null}]}],["$","$L8",null,{}]]}]}]}]]}],null]],[[["$","link","0",{"rel":"stylesheet","href":"/my-blog/_next/static/css/83cc0ea6f102b864.css","precedence":"next","crossOrigin":""}]],"$L9"]]]]
9:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","meta","1",{"charSet":"utf-8"}],["$","title","2",{"children":"Blog"}],["$","meta","3",{"name":"description","content":"A personal blog connected with Notion"}],["$","link","4",{"rel":"icon","href":"/my-blog/favicon.ico","type":"image/x-icon","sizes":"16x16"}]]
1:null
a:I[74366,["644","static/chunks/644-4de71cea8aeaed79.js","852","static/chunks/852-215445fe88778aae.js","308","static/chunks/app/blog/%5Bslug%5D/page-fab3f594c1476cf4.js"],"NotionRenderer"]
2:["$","main",null,{"className":"post-container","children":["$","article",null,{"className":"post-article","children":[null,["$","h1",null,{"className":"post-title","children":"Regular Expressions (Regex): Master Text Pattern Matching"}],["$","div",null,{"className":"post-content","children":["$","$La",null,{"blocks":[{"id":"block-0","type":"paragraph","content":"Regular expressions (regex) are one of the most powerful tools for text processing and pattern matching. Despite their intimidating appearance, mastering regex can dramatically improve your coding efficiency and text manipulation capabilities.","properties":{}},{"id":"block-1","type":"paragraph","content":"In this guide, we'll demystify regex, show you practical examples, and help you become proficient with pattern matching.","properties":{}},{"id":"block-2","type":"divider","content":"---","properties":{}},{"id":"block-3","type":"heading_2","content":"üîç What Are Regular Expressions?","properties":{}},{"id":"block-4","type":"paragraph","content":"Regular expressions are **patterns used to match character combinations in strings**. They're like a search language that describes what you're looking for in text.","properties":{}},{"id":"block-5","type":"heading_3","content":"Basic Syntax","properties":{}},{"id":"block-6","type":"code","content":"```javascript\n`\nconst regex = /pattern/flags;\nconst result = text.match(regex);\n`\n```","properties":{"language":"$undefined"}},{"id":"block-7","type":"heading_3","content":"Real Example","properties":{}},{"id":"block-8","type":"code","content":"```javascript\n`\nconst email = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\nconst isValid = email.test(\"user@example.com\"); // true\n`\n```","properties":{"language":"$undefined"}},{"id":"block-9","type":"divider","content":"---","properties":{}},{"id":"block-10","type":"heading_2","content":"üß© Essential Regex Components","properties":{}},{"id":"block-11","type":"heading_3","content":"Character Classes","properties":{}},{"id":"block-12","type":"table","content":"| Pattern    | Matches                            | Example                        |\n| ---------- | ---------------------------------- | ------------------------------ |\n| `.`        | Any character except newline       | `/a.c/` matches \"abc\", \"axc\"   |\n| `\\d`       | Any digit (0-9)                    | `/\\d+/` matches \"123\"          |\n| `\\w`       | Word characters (a-z, A-Z, 0-9, _) | `/\\w+/` matches \"hello_123\"    |\n| `\\s`       | Whitespace characters              | `/\\s+/` matches spaces, tabs   |\n| `[abc]`    | Any character in brackets          | `/[aeiou]/` matches vowels     |\n| `[a-zA-Z]` | Any letter (upper or lowercase)    | `/[a-zA-Z]+/g` matches \"Hello\" |\n| `[^abc]`   | Any character NOT in brackets      | `/[^0-9]/` matches non-digits  |","properties":{}},{"id":"block-12-0","type":"table_row","content":"","properties":{}},{"id":"block-12-1","type":"table_row","content":"","properties":{}},{"id":"block-12-2","type":"table_row","content":"","properties":{}},{"id":"block-12-3","type":"table_row","content":"","properties":{}},{"id":"block-12-4","type":"table_row","content":"","properties":{}},{"id":"block-12-5","type":"table_row","content":"","properties":{}},{"id":"block-12-6","type":"table_row","content":"","properties":{}},{"id":"block-12-7","type":"table_row","content":"","properties":{}},{"id":"block-13","type":"heading_3","content":"Quantifiers","properties":{}},{"id":"block-14","type":"table","content":"| Pattern | Meaning               | Example                                |\n| ------- | --------------------- | -------------------------------------- |\n| `*`     | Zero or more          | `/ab*/` matches \"a\", \"ab\", \"abbb\"      |\n| `+`     | One or more           | `/ab+/` matches \"ab\", \"abbb\" (not \"a\") |\n| `?`     | Zero or one           | `/colou?r/` matches \"color\", \"colour\"  |\n| `{n}`   | Exactly n times       | `/\\d{3}/` matches exactly 3 digits     |\n| `{n,m}` | Between n and m times | `/\\d{2,4}/` matches 2-4 digits         |","properties":{}},{"id":"block-14-0","type":"table_row","content":"","properties":{}},{"id":"block-14-1","type":"table_row","content":"","properties":{}},{"id":"block-14-2","type":"table_row","content":"","properties":{}},{"id":"block-14-3","type":"table_row","content":"","properties":{}},{"id":"block-14-4","type":"table_row","content":"","properties":{}},{"id":"block-14-5","type":"table_row","content":"","properties":{}},{"id":"block-15","type":"heading_3","content":"Anchors","properties":{}},{"id":"block-16","type":"table","content":"| Pattern | Meaning              | Example                               |\n| ------- | -------------------- | ------------------------------------- |\n| `^`     | Start of string/line | `/^Hello/` matches \"Hello world\"      |\n| `$`     | End of string/line   | `/world$/` matches \"Hello world\"      |\n| `\\b`    | Word boundary        | `/\\bcat\\b/` matches \"cat\" not \"catch\" |","properties":{}},{"id":"block-16-0","type":"table_row","content":"","properties":{}},{"id":"block-16-1","type":"table_row","content":"","properties":{}},{"id":"block-16-2","type":"table_row","content":"","properties":{}},{"id":"block-16-3","type":"table_row","content":"","properties":{}},{"id":"block-17","type":"divider","content":"---","properties":{}},{"id":"block-18","type":"heading_2","content":"üéØ Common Use Cases & Solutions","properties":{}},{"id":"block-19","type":"heading_3","content":"Email Validation","properties":{}},{"id":"block-20","type":"code","content":"```javascript\n`\nconst emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\nconst email = \"user@example.com\";\nconsole.log(emailRegex.test(email)); // true\n`\n```","properties":{"language":"$undefined"}},{"id":"block-21","type":"heading_3","content":"Phone Number Extraction","properties":{}},{"id":"block-22","type":"code","content":"```javascript\n`\nconst phoneRegex = /\\(?\\d{3}\\)?[-.\\s]?\\d{3}[-.\\s]?\\d{4}/g;\nconst text = \"Call me at (555) 123-4567 or 555.987.6543\";\nconst phones = text.match(phoneRegex);\n// [\"(555) 123-4567\", \"555.987.6543\"]\n`\n```","properties":{"language":"$undefined"}},{"id":"block-23","type":"heading_3","content":"URL Matching","properties":{}},{"id":"block-24","type":"code","content":"```javascript\n`\nconst urlRegex = /https?:\\/\\/[^\\s]+/g;\nconst text = \"Visit https://example.com or http://test.org\";\nconst urls = text.match(urlRegex);\n// [\"https://example.com\", \"http://test.org\"]\n`\n```","properties":{"language":"$undefined"}},{"id":"block-25","type":"heading_3","content":"Password Validation","properties":{}},{"id":"block-26","type":"code","content":"```javascript\n`\n// At least 8 chars, 1 uppercase, 1 lowercase, 1 digit\nconst strongPassword = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)[a-zA-Z\\d@$!%*?&]{8,}$/;\nconst password = \"MyPass123\";\nconsole.log(strongPassword.test(password)); // true\n`\n```","properties":{"language":"$undefined"}},{"id":"block-27","type":"divider","content":"---","properties":{}},{"id":"block-28","type":"heading_2","content":"üîß Practical Examples","properties":{}},{"id":"block-29","type":"heading_3","content":"Data Cleaning","properties":{}},{"id":"block-30","type":"code","content":"```javascript\n`\n// Remove extra whitespace\nconst cleanText = text.replace(/\\s+/g, ' ').trim();\n\n// Extract numbers from string\nconst numbers = \"Price: $29.99, Tax: $2.50\".match(/\\d+\\.?\\d*/g);\n// [\"29.99\", \"2.50\"]\n\n// Format phone numbers\nconst formatPhone = (phone) => {\n  return phone.replace(/(\\d{3})(\\d{3})(\\d{4})/, '($1) $2-$3');\n};\n`\n```","properties":{"language":"$undefined"}},{"id":"block-31","type":"heading_3","content":"HTML Tag Removal","properties":{}},{"id":"block-32","type":"code","content":"```javascript\n`\nconst stripHtml = (html) => {\n  return html.replace(/<[^>]*>/g, '');\n};\n\nconst clean = stripHtml(\"<p>Hello <b>world</b>!</p>\");\n// \"Hello world!\"\n`\n```","properties":{"language":"$undefined"}},{"id":"block-33","type":"heading_3","content":"Find and Replace","properties":{}},{"id":"block-34","type":"code","content":"```javascript\n`\n// Replace multiple spaces with single space\nconst text = \"Hello    world     there\";\nconst cleaned = text.replace(/\\s+/g, ' ');\n// \"Hello world there\"\n\n// Convert camelCase to kebab-case\nconst kebabCase = (str) => {\n  return str.replace(/([A-Z])/g, '-$1').toLowerCase();\n};\n`\n```","properties":{"language":"$undefined"}},{"id":"block-35","type":"divider","content":"---","properties":{}},{"id":"block-36","type":"heading_2","content":"‚öôÔ∏è Regex Flags","properties":{}},{"id":"block-37","type":"table","content":"| Flag | Purpose                   | Example                                        |\n| ---- | ------------------------- | ---------------------------------------------- |\n| `g`  | Global (find all matches) | `/cat/g` finds all \"cat\" occurrences           |\n| `i`  | Case insensitive          | `/hello/i` matches \"Hello\", \"HELLO\"            |\n| `m`  | Multiline                 | `/^start/m` matches \"start\" at line beginnings |\n| `s`  | Dot matches newlines      | `/a.b/s` matches \"a\\nb\"                        |","properties":{}},{"id":"block-37-0","type":"table_row","content":"","properties":{}},{"id":"block-37-1","type":"table_row","content":"","properties":{}},{"id":"block-37-2","type":"table_row","content":"","properties":{}},{"id":"block-37-3","type":"table_row","content":"","properties":{}},{"id":"block-37-4","type":"table_row","content":"","properties":{}},{"id":"block-38","type":"code","content":"```javascript\n`\nconst text = \"Hello World, hello everyone\";\nconst matches = text.match(/hello/gi); // [\"Hello\", \"hello\"]\n`\n```","properties":{"language":"$undefined"}},{"id":"block-39","type":"divider","content":"---","properties":{}},{"id":"block-40","type":"heading_2","content":"üöÄ Advanced Patterns","properties":{}},{"id":"block-41","type":"heading_3","content":"Lookaheads and Lookbehinds","properties":{}},{"id":"block-42","type":"code","content":"```javascript\n`\n// Positive lookahead: password with digit\nconst hasDigit = /^(?=.*\\d).+$/;\n\n// Negative lookahead: word not followed by \"ing\"\nconst notIng = /\\b\\w+(?!ing)\\b/g;\n\n// Positive lookbehind: digit after \"$\"\nconst afterDollar = /(?<=\\$)\\d+/g;\n`\n```","properties":{"language":"$undefined"}},{"id":"block-43","type":"heading_3","content":"Capturing Groups","properties":{}},{"id":"block-44","type":"code","content":"```javascript\n`\nconst dateRegex = /(\\d{4})-(\\d{2})-(\\d{2})/;\nconst match = \"2024-03-15\".match(dateRegex);\n// [\"2024-03-15\", \"2024\", \"03\", \"15\"]\n\nconst [full, year, month, day] = match;\n`\n```","properties":{"language":"$undefined"}},{"id":"block-45","type":"heading_3","content":"Named Groups","properties":{}},{"id":"block-46","type":"code","content":"```javascript\n`\nconst nameRegex = /(?<first>\\w+)\\s+(?<last>\\w+)/;\nconst match = \"Marta Perez\".match(nameRegex);\n// match.groups.first = \"Marta\"\n// match.groups.last = \"Perez\"\n`\n```","properties":{"language":"$undefined"}},{"id":"block-47","type":"divider","content":"---","properties":{}},{"id":"block-48","type":"heading_2","content":"üõ†Ô∏è Framework Integration","properties":{}},{"id":"block-49","type":"heading_3","content":"JavaScript","properties":{}},{"id":"block-50","type":"code","content":"```javascript\n`\n// String methods\n\"hello world\".match(/\\w+/g); // [\"hello\", \"world\"]\n\"hello world\".replace(/\\w+/g, 'hi'); // \"hi hi\"\n\"hello world\".search(/world/); // 6\n\n// RegExp methods\n/\\d+/.test(\"123abc\"); // true\n/(\\w+)/g.exec(\"hello world\"); // [\"hello\", \"hello\"]\n`\n```","properties":{"language":"$undefined"}},{"id":"block-51","type":"heading_3","content":"Node.js File Processing","properties":{}},{"id":"block-52","type":"code","content":"```javascript\n`\nconst fs = require('fs');\n\nconst processLogFile = (filename) => {\n  const content = fs.readFileSync(filename, 'utf8');\n  const errors = content.match(/ERROR.*$/gm);\n  return errors || [];\n};\n`\n```","properties":{"language":"$undefined"}},{"id":"block-53","type":"heading_3","content":"React Form Validation","properties":{}},{"id":"block-54","type":"code","content":"```javascript\n`\nconst validateInput = (value, pattern) => {\n  return pattern.test(value);\n};\n\n// Usage in component\nconst isValidEmail = validateInput(email, /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/);\n`\n```","properties":{"language":"$undefined"}},{"id":"block-55","type":"divider","content":"---","properties":{}},{"id":"block-56","type":"heading_2","content":"‚ö†Ô∏è Common Pitfalls","properties":{}},{"id":"block-57","type":"heading_3","content":"Greedy vs Non-greedy","properties":{}},{"id":"block-58","type":"code","content":"```javascript\n`\n// Greedy (matches as much as possible)\nconst greedy = /<.*>/g;\n\"<div>content</div>\".match(greedy); // [\"<div>content</div>\"]\n\n// Non-greedy (matches as little as possible)\nconst nonGreedy = /<.*?>/g;\n\"<div>content</div>\".match(nonGreedy); // [\"<div>\", \"</div>\"]\n`\n```","properties":{"language":"$undefined"}},{"id":"block-59","type":"heading_3","content":"Escaping Special Characters","properties":{}},{"id":"block-60","type":"code","content":"```javascript\n`\n// Wrong: trying to match literal dots\nconst wrong = /3.14/; // Matches \"3X14\" too\n\n// Correct: escape the dot\nconst correct = /3\\.14/; // Matches only \"3.14\"\n\n// Escape function\nconst escapeRegex = (str) => {\n  return str.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&');\n};\n`\n```","properties":{"language":"$undefined"}},{"id":"block-61","type":"divider","content":"---","properties":{}},{"id":"block-62","type":"heading_2","content":"üîç Testing and Debugging","properties":{}},{"id":"block-63","type":"heading_3","content":"Online Tools","properties":{}},{"id":"block-64","type":"bulleted_list_item","content":"- [**regex101.com**](https://regex101.com/) - Interactive testing with explanations","properties":{}},{"id":"block-65","type":"bulleted_list_item","content":"- [**regexr.com**](https://regexr.com/) - Visual regex builder","properties":{}},{"id":"block-66","type":"bulleted_list_item","content":"- [**regexpal.com**](https://www.regexpal.com/) - Simple testing interface","properties":{}},{"id":"block-67","type":"heading_3","content":"Testing in Code","properties":{}},{"id":"block-68","type":"code","content":"```javascript\n`\nconst testRegex = (pattern, tests) => {\n  tests.forEach(({ input, expected }) => {\n    const result = pattern.test(input);\n    console.log(`${input}: ${result === expected ? '‚úÖ' : '‚ùå'}`);\n  });\n};\n\ntestRegex(/^\\d{3}-\\d{2}-\\d{4}$/, [\n  { input: \"123-45-6789\", expected: true },\n  { input: \"123-456-789\", expected: false }\n]);\n`\n```","properties":{"language":"$undefined"}},{"id":"block-69","type":"divider","content":"---","properties":{}},{"id":"block-70","type":"heading_2","content":"üéØ When to Use Regex","properties":{}},{"id":"block-71","type":"heading_3","content":"Perfect for:","properties":{}},{"id":"block-72","type":"bulleted_list_item","content":"- **Input validation** (emails, phones, passwords)","properties":{}},{"id":"block-73","type":"bulleted_list_item","content":"- **Data extraction** from text files","properties":{}},{"id":"block-74","type":"bulleted_list_item","content":"- **Text cleaning** and formatting","properties":{}},{"id":"block-75","type":"bulleted_list_item","content":"- **Log file analysis**","properties":{}},{"id":"block-76","type":"bulleted_list_item","content":"- **Find and replace** operations","properties":{}},{"id":"block-77","type":"heading_3","content":"Avoid for:","properties":{}},{"id":"block-78","type":"bulleted_list_item","content":"- **HTML/XML parsing** (use proper parsers)","properties":{}},{"id":"block-79","type":"bulleted_list_item","content":"- **Complex nested structures**","properties":{}},{"id":"block-80","type":"bulleted_list_item","content":"- **When readability matters more than brevity**","properties":{}},{"id":"block-81","type":"bulleted_list_item","content":"- **Performance-critical loops** (compile once, reuse)","properties":{}},{"id":"block-82","type":"divider","content":"---","properties":{}},{"id":"block-83","type":"heading_2","content":"‚úÖ Best Practices","properties":{}},{"id":"block-84","type":"bulleted_list_item","content":"- **Keep it simple** - Complex regex is hard to maintain","properties":{}},{"id":"block-85","type":"bulleted_list_item","content":"- **Use comments** for complex patterns","properties":{}},{"id":"block-86","type":"bulleted_list_item","content":"- **Test thoroughly** with edge cases","properties":{}},{"id":"block-87","type":"bulleted_list_item","content":"- **Compile once** for repeated use","properties":{}},{"id":"block-88","type":"bulleted_list_item","content":"- **Consider alternatives** for complex parsing","properties":{}},{"id":"block-89","type":"code","content":"```javascript\n`\n// Good: Clear and maintainable\nconst phoneRegex = /^\\(\\d{3}\\) \\d{3}-\\d{4}$/;\n\n// Bad: Overly complex\nconst badRegex = /^(?:(?:\\+?1\\s*(?:[.-]\\s*)?)?(?:\\(\\s*([2-9]1[02-9]|[2-9][02-8]1|[2-9][02-8][02-9])\\s*\\)|([2-9]1[02-9]|[2-9][02-8]1|[2-9][02-8][02-9]))\\s*(?:[.-]\\s*)?)?([2-9]1[02-9]|[2-9][02-9]1|[2-9][02-9]{2})\\s*(?:[.-]\\s*)?([0-9]{4})(?:\\s*(?:#|x\\.?|ext\\.?|extension)\\s*(\\d+))?$/;\n`\n```","properties":{"language":"$undefined"}},{"id":"block-90","type":"divider","content":"---","properties":{}},{"id":"block-91","type":"heading_2","content":"üß† Conclusion","properties":{}},{"id":"block-92","type":"paragraph","content":"Regular expressions are incredibly powerful for text processing and pattern matching. While they can seem intimidating at first, understanding the basic building blocks and common patterns will make you much more efficient at handling text data.","properties":{}},{"id":"block-93","type":"paragraph","content":"Start with simple patterns, practice with real examples, and gradually build up to more complex expressions. Remember: a readable regex that works is better than a clever one that nobody can understand.","properties":{}},{"id":"block-94","type":"paragraph","content":"","properties":{}},{"id":"block-95","type":"paragraph","content":" ","properties":{}},{"id":"block-119","type":"paragraph","content":"","properties":{}}]}]}],["$","div",null,{"className":"post-meta","children":[["$","div",null,{"className":"post-date","children":[["$","svg",null,{"xmlns":"http://www.w3.org/2000/svg","width":24,"height":24,"viewBox":"0 0 24 24","fill":"none","stroke":"currentColor","strokeWidth":2,"strokeLinecap":"round","strokeLinejoin":"round","className":"lucide lucide-calendar h-4 w-4","children":[["$","rect","eu3xkr",{"width":"18","height":"18","x":"3","y":"4","rx":"2","ry":"2"}],["$","line","m3sa8f",{"x1":"16","x2":"16","y1":"2","y2":"6"}],["$","line","18kwsl",{"x1":"8","x2":"8","y1":"2","y2":"6"}],["$","line","xt86sb",{"x1":"3","x2":"21","y1":"10","y2":"10"}],"$undefined"]}],["$","span",null,{"children":"June 5, 2025"}]]}],["$","div",null,{"className":"post-tags","children":[["$","svg",null,{"xmlns":"http://www.w3.org/2000/svg","width":24,"height":24,"viewBox":"0 0 24 24","fill":"none","stroke":"currentColor","strokeWidth":2,"strokeLinecap":"round","strokeLinejoin":"round","className":"lucide lucide-tag h-4 w-4","children":[["$","path","14b2ls",{"d":"M12 2H2v10l9.29 9.29c.94.94 2.48.94 3.42 0l6.58-6.58c.94-.94.94-2.48 0-3.42L12 2Z"}],["$","path","7u93v4",{"d":"M7 7h.01"}],"$undefined"]}],["$","div",null,{"className":"flex gap-2","children":[["$","span","JavaScript",{"className":"post-tag","children":["#","JavaScript"]}],["$","span","Regex",{"className":"post-tag","children":["#","Regex"]}]]}]]}]]}]]}]}]
