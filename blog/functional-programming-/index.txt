3:I[5613,[],""]
5:I[31778,[],""]
6:I[70269,["250","static/chunks/250-f66e98452b80d3d3.js","185","static/chunks/app/layout-0afccb43f7c6e640.js"],"ThemeProvider"]
7:I[63186,["250","static/chunks/250-f66e98452b80d3d3.js","185","static/chunks/app/layout-0afccb43f7c6e640.js"],""]
8:I[69148,["250","static/chunks/250-f66e98452b80d3d3.js","185","static/chunks/app/layout-0afccb43f7c6e640.js"],""]
4:["slug","functional-programming-","d"]
0:["HIzOz3PQmqwg7eu-XUTx4",[[["",{"children":["blog",{"children":[["slug","functional-programming-","d"],{"children":["__PAGE__?{\"slug\":\"functional-programming-\"}",{}]}]}]},"$undefined","$undefined",true],["",{"children":["blog",{"children":[["slug","functional-programming-","d"],{"children":["__PAGE__",{},["$L1","$L2",null]]},["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","blog","children","$4","children"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":[["$","link","0",{"rel":"stylesheet","href":"/my-blog/_next/static/css/a494df4e6249897d.css","precedence":"next","crossOrigin":""}]]}]]},["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","blog","children"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":null}]]},[null,["$","html",null,{"lang":"en","suppressHydrationWarning":true,"children":[["$","head",null,{"children":[["$","meta",null,{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","link",null,{"rel":"icon","href":"/favicon.ico"}]]}],["$","body",null,{"className":"bg-black text-white min-h-screen flex flex-col","children":["$","$L6",null,{"defaultTheme":"dark","children":["$","div",null,{"className":"flex flex-col min-h-screen","children":[["$","$L7",null,{}],["$","div",null,{"className":"flex-grow","children":["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":"404"}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],"notFoundStyles":[],"styles":null}]}],["$","$L8",null,{}]]}]}]}]]}],null]],[[["$","link","0",{"rel":"stylesheet","href":"/my-blog/_next/static/css/83cc0ea6f102b864.css","precedence":"next","crossOrigin":""}]],"$L9"]]]]
9:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","meta","1",{"charSet":"utf-8"}],["$","title","2",{"children":"Blog"}],["$","meta","3",{"name":"description","content":"A personal blog connected with Notion"}],["$","link","4",{"rel":"icon","href":"/my-blog/favicon.ico","type":"image/x-icon","sizes":"16x16"}]]
1:null
a:I[74366,["644","static/chunks/644-4de71cea8aeaed79.js","852","static/chunks/852-215445fe88778aae.js","308","static/chunks/app/blog/%5Bslug%5D/page-e9a6f6be5ec41ed9.js"],"NotionRenderer"]
2:["$","main",null,{"className":"post-container","children":["$","article",null,{"className":"post-article","children":[null,["$","h1",null,{"className":"post-title","children":"Functional programming patterns"}],["$","div",null,{"className":"post-content","children":["$","$La",null,{"blocks":[{"id":"block-0","type":"heading_1","content":"Pure Functions, Immutability, and Composition","properties":{}},{"id":"block-1","type":"heading_2","content":"What is Functional Programming?","properties":{}},{"id":"block-2","type":"paragraph","content":"**Functional Programming (FP)** is a programming paradigm centered around the use of pure functions, immutability, and function composition. It promotes writing predictable, reusable, and testable code by avoiding shared state and side effects.","properties":{}},{"id":"block-3","type":"paragraph","content":"FP is especially popular in JavaScript, where functions are first-class citizens and can be passed, returned, or composed freely.","properties":{}},{"id":"block-4","type":"divider","content":"---","properties":{}},{"id":"block-5","type":"heading_2","content":"Pure Functions","properties":{}},{"id":"block-6","type":"paragraph","content":"A **pure function** is one that:","properties":{}},{"id":"block-7","type":"bulleted_list_item","content":"- Always returns the same output given the same input","properties":{}},{"id":"block-8","type":"bulleted_list_item","content":"- Has no side effects (does not modify external variables, DOM, or global state)","properties":{}},{"id":"block-9","type":"heading_3","content":"Example:","properties":{}},{"id":"block-10","type":"code","content":"```javascript\n`\nfunction add(a, b) {\n  return a + b;\n}\n`\n```","properties":{"language":"$undefined"}},{"id":"block-11","type":"paragraph","content":"This function is pure because it doesn't rely on or modify anything outside itself.","properties":{}},{"id":"block-12","type":"heading_3","content":"Benefits:","properties":{}},{"id":"block-13","type":"bulleted_list_item","content":"- Easier to test","properties":{}},{"id":"block-14","type":"bulleted_list_item","content":"- Predictable behavior","properties":{}},{"id":"block-15","type":"bulleted_list_item","content":"- Reusable in different contexts","properties":{}},{"id":"block-16","type":"divider","content":"---","properties":{}},{"id":"block-17","type":"heading_2","content":"Immutability","properties":{}},{"id":"block-18","type":"paragraph","content":"**Immutability** means that once a value is created, it cannot be changed. Instead of modifying existing data, we create new copies with the desired changes.","properties":{}},{"id":"block-19","type":"heading_3","content":"Example:","properties":{}},{"id":"block-20","type":"code","content":"```javascript\n`\nconst numbers = [1, 2, 3];\nconst newNumbers = [...numbers, 4];\n`\n```","properties":{"language":"$undefined"}},{"id":"block-21","type":"paragraph","content":"We use the spread operator to create a new array without mutating the original.","properties":{}},{"id":"block-22","type":"heading_3","content":"Why it matters:","properties":{}},{"id":"block-23","type":"bulleted_list_item","content":"- Prevents unexpected side effects","properties":{}},{"id":"block-24","type":"bulleted_list_item","content":"- Makes state management easier (e.g., in React)","properties":{}},{"id":"block-25","type":"divider","content":"---","properties":{}},{"id":"block-26","type":"heading_2","content":"Function Composition","properties":{}},{"id":"block-27","type":"paragraph","content":"**Composition** is combining smaller functions to build more complex ones. It's about creating pipelines where the output of one function is the input of another.","properties":{}},{"id":"block-28","type":"heading_3","content":"Example:","properties":{}},{"id":"block-29","type":"code","content":"```javascript\n`\nconst double = x => x * 2;\nconst square = x => x * x;\n\nconst doubleThenSquare = x => square(double(x));\n`\n```","properties":{"language":"$undefined"}},{"id":"block-30","type":"paragraph","content":"You can also use libraries like `lodash/fp` or write your own `compose` or `pipe` functions to enhance this pattern.","properties":{}},{"id":"block-31","type":"divider","content":"---","properties":{}},{"id":"block-32","type":"heading_2","content":"Key Concepts Comparison","properties":{}},{"id":"block-33","type":"table","content":"| Concept        | Description                                         | Benefit                           |\n| -------------- | --------------------------------------------------- | --------------------------------- |\n| Pure Functions | Functions without side effects                      | Testable, predictable             |\n| Immutability   | Data doesn't change; create copies instead          | Avoid bugs from shared state      |\n| Composition    | Combine simple functions into more complex behavior | Reusability, cleaner abstractions |","properties":{}},{"id":"block-33-0","type":"table_row","content":"","properties":{}},{"id":"block-33-1","type":"table_row","content":"","properties":{}},{"id":"block-33-2","type":"table_row","content":"","properties":{}},{"id":"block-33-3","type":"table_row","content":"","properties":{}},{"id":"block-34","type":"divider","content":"---","properties":{}},{"id":"block-35","type":"heading_2","content":"Best Practices","properties":{}},{"id":"block-36","type":"bulleted_list_item","content":"- Avoid mutating parameters or shared variables","properties":{}},{"id":"block-37","type":"bulleted_list_item","content":"- Favor small, single-purpose functions","properties":{}},{"id":"block-38","type":"bulleted_list_item","content":"- Use utility libraries like `Ramda` or `Lodash/fp` for helpers","properties":{}},{"id":"block-39","type":"bulleted_list_item","content":"- Prefer `map`, `filter`, `reduce` over `for` loops for transformations","properties":{}},{"id":"block-40","type":"divider","content":"---","properties":{}},{"id":"block-41","type":"heading_2","content":"Conclusion","properties":{}},{"id":"block-42","type":"paragraph","content":"Functional programming patterns like **pure functions**, **immutability**, and **composition** help you write more **reliable**, **maintainable**, and **scalable** code. These principles are especially useful in large codebases and frameworks like React where state management and predictable behavior are crucial.","properties":{}}]}]}],["$","div",null,{"className":"post-meta","children":[["$","div",null,{"className":"post-date","children":[["$","svg",null,{"xmlns":"http://www.w3.org/2000/svg","width":24,"height":24,"viewBox":"0 0 24 24","fill":"none","stroke":"currentColor","strokeWidth":2,"strokeLinecap":"round","strokeLinejoin":"round","className":"lucide lucide-calendar h-4 w-4","children":[["$","rect","eu3xkr",{"width":"18","height":"18","x":"3","y":"4","rx":"2","ry":"2"}],["$","line","m3sa8f",{"x1":"16","x2":"16","y1":"2","y2":"6"}],["$","line","18kwsl",{"x1":"8","x2":"8","y1":"2","y2":"6"}],["$","line","xt86sb",{"x1":"3","x2":"21","y1":"10","y2":"10"}],"$undefined"]}],["$","span",null,{"children":"April 14, 2025"}]]}],["$","div",null,{"className":"post-tags","children":[["$","svg",null,{"xmlns":"http://www.w3.org/2000/svg","width":24,"height":24,"viewBox":"0 0 24 24","fill":"none","stroke":"currentColor","strokeWidth":2,"strokeLinecap":"round","strokeLinejoin":"round","className":"lucide lucide-tag h-4 w-4","children":[["$","path","14b2ls",{"d":"M12 2H2v10l9.29 9.29c.94.94 2.48.94 3.42 0l6.58-6.58c.94-.94.94-2.48 0-3.42L12 2Z"}],["$","path","7u93v4",{"d":"M7 7h.01"}],"$undefined"]}],["$","div",null,{"className":"flex gap-2","children":[["$","span","JavaScript",{"className":"post-tag","children":["#","JavaScript"]}],["$","span","functional-programming",{"className":"post-tag","children":["#","functional-programming"]}],["$","span","patterns",{"className":"post-tag","children":["#","patterns"]}]]}]]}]]}]]}]}]
