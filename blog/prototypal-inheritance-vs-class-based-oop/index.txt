3:I[5613,[],""]
5:I[31778,[],""]
6:I[70269,["250","static/chunks/250-f66e98452b80d3d3.js","185","static/chunks/app/layout-eeb53c07ffb10a3f.js"],"ThemeProvider"]
7:I[63186,["250","static/chunks/250-f66e98452b80d3d3.js","185","static/chunks/app/layout-eeb53c07ffb10a3f.js"],""]
8:I[69148,["250","static/chunks/250-f66e98452b80d3d3.js","185","static/chunks/app/layout-eeb53c07ffb10a3f.js"],""]
4:["slug","prototypal-inheritance-vs-class-based-oop","d"]
0:["lMtxhImsujvt0dgg-tL8A",[[["",{"children":["blog",{"children":[["slug","prototypal-inheritance-vs-class-based-oop","d"],{"children":["__PAGE__?{\"slug\":\"prototypal-inheritance-vs-class-based-oop\"}",{}]}]}]},"$undefined","$undefined",true],["",{"children":["blog",{"children":[["slug","prototypal-inheritance-vs-class-based-oop","d"],{"children":["__PAGE__",{},["$L1","$L2",null]]},["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","blog","children","$4","children"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":[["$","link","0",{"rel":"stylesheet","href":"/my-blog/_next/static/css/a494df4e6249897d.css","precedence":"next","crossOrigin":""}]]}]]},["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","blog","children"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":null}]]},[null,["$","html",null,{"lang":"en","suppressHydrationWarning":true,"children":[["$","head",null,{"children":[["$","meta",null,{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","link",null,{"rel":"icon","href":"/favicon.ico"}]]}],["$","body",null,{"className":"bg-black text-white min-h-screen flex flex-col","children":["$","$L6",null,{"defaultTheme":"dark","children":["$","div",null,{"className":"flex flex-col min-h-screen","children":[["$","$L7",null,{}],["$","div",null,{"className":"flex-grow","children":["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":"404"}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],"notFoundStyles":[],"styles":null}]}],["$","$L8",null,{}]]}]}]}]]}],null]],[[["$","link","0",{"rel":"stylesheet","href":"/my-blog/_next/static/css/83cc0ea6f102b864.css","precedence":"next","crossOrigin":""}]],"$L9"]]]]
9:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","meta","1",{"charSet":"utf-8"}],["$","title","2",{"children":"Blog"}],["$","meta","3",{"name":"description","content":"A personal blog connected with Notion"}],["$","link","4",{"rel":"icon","href":"/my-blog/favicon.ico","type":"image/x-icon","sizes":"16x16"}]]
1:null
a:I[74366,["644","static/chunks/644-4de71cea8aeaed79.js","852","static/chunks/852-215445fe88778aae.js","308","static/chunks/app/blog/%5Bslug%5D/page-fab3f594c1476cf4.js"],"NotionRenderer"]
2:["$","main",null,{"className":"post-container","children":["$","article",null,{"className":"post-article","children":[null,["$","h1",null,{"className":"post-title","children":"Prototypal Inheritance vs. Class-based OOP"}],["$","div",null,{"className":"post-content","children":["$","$La",null,{"blocks":[{"id":"block-0","type":"heading_1","content":"JavaScriptâ€™s Unique Inheritance Model","properties":{}},{"id":"block-1","type":"heading_2","content":"Introduction to Inheritance in JavaScript","properties":{}},{"id":"block-2","type":"paragraph","content":"JavaScript is different from many traditional object-oriented programming (OOP) languages because it uses **prototypal inheritance** rather than a strictly **class-based** model like Java or C++. Although ES6 introduced the `class` keyword, under the hood, JavaScript still relies on prototypes.","properties":{}},{"id":"block-3","type":"paragraph","content":"Understanding this difference is essential to mastering object-oriented patterns in JavaScript.","properties":{}},{"id":"block-4","type":"divider","content":"---","properties":{}},{"id":"block-5","type":"heading_2","content":"What is Prototypal Inheritance?","properties":{}},{"id":"block-6","type":"paragraph","content":"Prototypal inheritance is a mechanism where objects inherit properties and methods directly from other objects.","properties":{}},{"id":"block-7","type":"paragraph","content":"In JavaScript, every object has an internal link to another object called its **prototype**. When you access a property on an object, JavaScript looks up the prototype chain until it finds it (or returns `undefined`).","properties":{}},{"id":"block-8","type":"heading_3","content":"Example:","properties":{}},{"id":"block-9","type":"code","content":"```javascript\n`\nconst animal = {\n  makeSound() {\n    console.log(\"Generic sound\");\n  }\n};\n\nconst dog = Object.create(animal);\ndog.makeSound(); // Output: Generic sound\n`\n```","properties":{"language":"$undefined"}},{"id":"block-10","type":"paragraph","content":"Here, `dog` inherits from `animal` using `Object.create`. This is the core of prototypal inheritance.","properties":{}},{"id":"block-11","type":"divider","content":"---","properties":{}},{"id":"block-12","type":"heading_2","content":"What is Class-based OOP?","properties":{}},{"id":"block-13","type":"paragraph","content":"Class-based OOP is a model where you define **classes** as blueprints for creating objects (instances). These classes can **inherit** from other classes using keywords like `extends`.","properties":{}},{"id":"block-14","type":"heading_3","content":"Example (in JavaScript using classes):","properties":{}},{"id":"block-15","type":"code","content":"```javascript\n`\nclass Animal {\n  makeSound() {\n    console.log(\"Generic sound\");\n  }\n}\n\nclass Dog extends Animal {\n  makeSound() {\n    console.log(\"Woof!\");\n  }\n}\n\nconst myDog = new Dog();\nmyDog.makeSound(); // Output: Woof!\n`\n```","properties":{"language":"$undefined"}},{"id":"block-16","type":"paragraph","content":"Although the syntax looks similar to languages like Java, this is still syntactic sugar over prototypes.","properties":{}},{"id":"block-17","type":"divider","content":"---","properties":{}},{"id":"block-18","type":"heading_2","content":"Key Differences","properties":{}},{"id":"block-19","type":"table","content":"| Feature               | Prototypal Inheritance                        | Class-based OOP                            |\n| --------------------- | --------------------------------------------- | ------------------------------------------ |\n| Inheritance Mechanism | Objects inherit directly from other objects   | Objects inherit from classes               |\n| Syntax                | Dynamic and flexible                          | More structured and familiar (ES6+ syntax) |\n| Object Creation       | `Object.create()` or manual linking           | `new` keyword with constructor functions   |\n| Flexibility           | High (can mix behaviors easily)               | More rigid, but predictable                |\n| Performance           | Slightly better in some prototype-heavy cases | Often negligible differences               |","properties":{}},{"id":"block-19-0","type":"table_row","content":"","properties":{}},{"id":"block-19-1","type":"table_row","content":"","properties":{}},{"id":"block-19-2","type":"table_row","content":"","properties":{}},{"id":"block-19-3","type":"table_row","content":"","properties":{}},{"id":"block-19-4","type":"table_row","content":"","properties":{}},{"id":"block-19-5","type":"table_row","content":"","properties":{}},{"id":"block-20","type":"divider","content":"---","properties":{}},{"id":"block-21","type":"heading_2","content":"When to Use Each","properties":{}},{"id":"block-22","type":"bulleted_list_item","content":"- **Use prototypal inheritance** when you want **flexibility** and **object delegation** without needing a strict class hierarchy.","properties":{}},{"id":"block-23","type":"bulleted_list_item","content":"- **Use class-based syntax** when working in teams or writing large-scale applications where a **familiar structure** improves readability and maintainability.","properties":{}},{"id":"block-24","type":"divider","content":"---","properties":{}},{"id":"block-25","type":"heading_2","content":"Mixing Both Approaches","properties":{}},{"id":"block-26","type":"paragraph","content":"Since JavaScript supports both styles, you can mix and match depending on your needs. Just remember: even when using `class`, JavaScript is still using prototypes behind the scenes.","properties":{}},{"id":"block-27","type":"divider","content":"---","properties":{}},{"id":"block-28","type":"paragraph","content":"","properties":{}},{"id":"block-29","type":"heading_2","content":"Conclusion","properties":{}},{"id":"block-30","type":"paragraph","content":"JavaScript's inheritance model is unique and powerful. While ES6 classes offer a familiar structure to developers from class-based OOP backgrounds, understanding the underlying **prototypal inheritance** model gives you deeper insight and greater control over how your objects share behavior. Embracing both paradigms will help you write more effective and idiomatic JavaScript.","properties":{}}]}]}],["$","div",null,{"className":"post-meta","children":[["$","div",null,{"className":"post-date","children":[["$","svg",null,{"xmlns":"http://www.w3.org/2000/svg","width":24,"height":24,"viewBox":"0 0 24 24","fill":"none","stroke":"currentColor","strokeWidth":2,"strokeLinecap":"round","strokeLinejoin":"round","className":"lucide lucide-calendar h-4 w-4","children":[["$","rect","eu3xkr",{"width":"18","height":"18","x":"3","y":"4","rx":"2","ry":"2"}],["$","line","m3sa8f",{"x1":"16","x2":"16","y1":"2","y2":"6"}],["$","line","18kwsl",{"x1":"8","x2":"8","y1":"2","y2":"6"}],["$","line","xt86sb",{"x1":"3","x2":"21","y1":"10","y2":"10"}],"$undefined"]}],["$","span",null,{"children":"April 15, 2025"}]]}],["$","div",null,{"className":"post-tags","children":[["$","svg",null,{"xmlns":"http://www.w3.org/2000/svg","width":24,"height":24,"viewBox":"0 0 24 24","fill":"none","stroke":"currentColor","strokeWidth":2,"strokeLinecap":"round","strokeLinejoin":"round","className":"lucide lucide-tag h-4 w-4","children":[["$","path","14b2ls",{"d":"M12 2H2v10l9.29 9.29c.94.94 2.48.94 3.42 0l6.58-6.58c.94-.94.94-2.48 0-3.42L12 2Z"}],["$","path","7u93v4",{"d":"M7 7h.01"}],"$undefined"]}],["$","div",null,{"className":"flex gap-2","children":[["$","span","object-oriented",{"className":"post-tag","children":["#","object-oriented"]}],["$","span","inheritance",{"className":"post-tag","children":["#","inheritance"]}],["$","span","JavaScript",{"className":"post-tag","children":["#","JavaScript"]}]]}]]}]]}]]}]}]
