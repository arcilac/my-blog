3:I[5613,[],""]
5:I[31778,[],""]
6:I[70269,["250","static/chunks/250-f66e98452b80d3d3.js","185","static/chunks/app/layout-eeb53c07ffb10a3f.js"],"ThemeProvider"]
7:I[63186,["250","static/chunks/250-f66e98452b80d3d3.js","185","static/chunks/app/layout-eeb53c07ffb10a3f.js"],""]
8:I[69148,["250","static/chunks/250-f66e98452b80d3d3.js","185","static/chunks/app/layout-eeb53c07ffb10a3f.js"],""]
4:["slug","advanced-sql-queries-guide","d"]
0:["oKRvycMo2t_yJvDQ4JWcd",[[["",{"children":["blog",{"children":[["slug","advanced-sql-queries-guide","d"],{"children":["__PAGE__?{\"slug\":\"advanced-sql-queries-guide\"}",{}]}]}]},"$undefined","$undefined",true],["",{"children":["blog",{"children":[["slug","advanced-sql-queries-guide","d"],{"children":["__PAGE__",{},["$L1","$L2",null]]},["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","blog","children","$4","children"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":[["$","link","0",{"rel":"stylesheet","href":"/my-blog/_next/static/css/a494df4e6249897d.css","precedence":"next","crossOrigin":""}]]}]]},["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","blog","children"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":null}]]},[null,["$","html",null,{"lang":"en","suppressHydrationWarning":true,"children":[["$","head",null,{"children":[["$","meta",null,{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","link",null,{"rel":"icon","href":"/favicon.ico"}]]}],["$","body",null,{"className":"bg-black text-white min-h-screen flex flex-col","children":["$","$L6",null,{"defaultTheme":"dark","children":["$","div",null,{"className":"flex flex-col min-h-screen","children":[["$","$L7",null,{}],["$","div",null,{"className":"flex-grow","children":["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":"404"}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],"notFoundStyles":[],"styles":null}]}],["$","$L8",null,{}]]}]}]}]]}],null]],[[["$","link","0",{"rel":"stylesheet","href":"/my-blog/_next/static/css/83cc0ea6f102b864.css","precedence":"next","crossOrigin":""}]],"$L9"]]]]
9:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","meta","1",{"charSet":"utf-8"}],["$","title","2",{"children":"Blog"}],["$","meta","3",{"name":"description","content":"A personal blog connected with Notion"}],["$","link","4",{"rel":"icon","href":"/my-blog/favicon.ico","type":"image/x-icon","sizes":"16x16"}]]
1:null
a:I[74366,["644","static/chunks/644-4de71cea8aeaed79.js","852","static/chunks/852-215445fe88778aae.js","308","static/chunks/app/blog/%5Bslug%5D/page-fab3f594c1476cf4.js"],"NotionRenderer"]
2:["$","main",null,{"className":"post-container","children":["$","article",null,{"className":"post-article","children":[null,["$","h1",null,{"className":"post-title","children":"Advanced SQL Queries: Mastering Complex Database Operations"}],["$","div",null,{"className":"post-content","children":["$","$La",null,{"blocks":[{"id":"block-0","type":"paragraph","content":"Now that you've mastered the basics of SQL, it's time to level up your database skills. Advanced SQL techniques allow you to handle complex business logic, optimize performance, and extract deeper insights from your data.","properties":{}},{"id":"block-1","type":"paragraph","content":"In this guide, we'll explore powerful SQL features that will transform you from a beginner into a proficient database developer.","properties":{}},{"id":"block-2","type":"divider","content":"---","properties":{}},{"id":"block-3","type":"heading_2","content":"🎯 HAVING: Filtering Grouped Data","properties":{}},{"id":"block-4","type":"paragraph","content":"While `WHERE` filters individual rows, `HAVING` filters groups created by `GROUP BY`. Think of `HAVING` as the \"WHERE clause for aggregated data.\"","properties":{}},{"id":"block-5","type":"heading_3","content":"Basic HAVING Example:","properties":{}},{"id":"block-6","type":"code","content":"```sql\n`\nSELECT category, COUNT(*) as product_count\nFROM products\nGROUP BY category\nHAVING COUNT(*) > 5;\n`\n```","properties":{"language":"$undefined"}},{"id":"block-7","type":"paragraph","content":"This shows only categories with more than 5 products.","properties":{}},{"id":"block-8","type":"heading_3","content":"HAVING vs WHERE:","properties":{}},{"id":"block-9","type":"code","content":"```sql\n`\n-- ❌ This won't work - can't use aggregates in WHERE\nSELECT category, COUNT(*) as product_count\nFROM products\nWHERE COUNT(*) > 5  -- ERROR!\nGROUP BY category;\n\n-- ✅ Correct approach with HAVING\nSELECT category, COUNT(*) as product_count\nFROM products\nGROUP BY category\nHAVING COUNT(*) > 5;\n`\n```","properties":{"language":"$undefined"}},{"id":"block-10","type":"heading_3","content":"Complex HAVING Example:","properties":{}},{"id":"block-11","type":"code","content":"```sql\n`\nSELECT\n    user_id,\n    COUNT(*) as order_count,\n    SUM(total_amount) as total_spent\nFROM orders\nWHERE order_date >= '2024-01-01'\nGROUP BY user_id\nHAVING COUNT(*) >= 3 AND SUM(total_amount) > 1000;\n`\n```","properties":{"language":"$undefined"}},{"id":"block-12","type":"paragraph","content":"This finds customers who placed at least 3 orders and spent more than $1000 this year.","properties":{}},{"id":"block-13","type":"divider","content":"---","properties":{}},{"id":"block-14","type":"heading_2","content":"🔗 Advanced JOIN Techniques","properties":{}},{"id":"block-15","type":"heading_3","content":"LEFT JOIN with NULL Checks:","properties":{}},{"id":"block-16","type":"code","content":"```sql\n`\n-- Find users who haven't placed any orders\nSELECT u.name, u.email\nFROM users u\nLEFT JOIN orders o ON u.id = o.user_id\nWHERE o.user_id IS NULL;\n`\n```","properties":{"language":"$undefined"}},{"id":"block-17","type":"heading_3","content":"Self JOIN:","properties":{}},{"id":"block-18","type":"code","content":"```sql\n`\n-- Find employees and their managers\nSELECT\n    e.name as employee_name,\n    m.name as manager_name\nFROM employees e\nLEFT JOIN employees m ON e.manager_id = m.id;\n`\n```","properties":{"language":"$undefined"}},{"id":"block-19","type":"heading_3","content":"Multiple JOINs:","properties":{}},{"id":"block-20","type":"code","content":"```sql\n`\nSELECT\n    u.name,\n    o.order_date,\n    p.product_name,\n    oi.quantity\nFROM users u\nJOIN orders o ON u.id = o.user_id\nJOIN order_items oi ON o.id = oi.order_id\nJOIN products p ON oi.product_id = p.id\nWHERE o.order_date >= '2024-01-01';\n`\n```","properties":{"language":"$undefined"}},{"id":"block-21","type":"divider","content":"---","properties":{}},{"id":"block-22","type":"heading_2","content":"🪟 Window Functions: Advanced Analytics","properties":{}},{"id":"block-23","type":"paragraph","content":"Window functions perform calculations across related rows without collapsing them into groups.","properties":{}},{"id":"block-24","type":"heading_3","content":"ROW_NUMBER() - Ranking Data:","properties":{}},{"id":"block-25","type":"code","content":"```sql\n`\nSELECT\n    name,\n    salary,\n    department,\n    ROW_NUMBER() OVER (PARTITION BY department ORDER BY salary DESC) as rank_in_dept\nFROM employees;\n`\n```","properties":{"language":"$undefined"}},{"id":"block-26","type":"heading_3","content":"RANK() and DENSE_RANK():","properties":{}},{"id":"block-27","type":"code","content":"```sql\n`\nSELECT\n    product_name,\n    sales_amount,\n    RANK() OVER (ORDER BY sales_amount DESC) as rank,\n    DENSE_RANK() OVER (ORDER BY sales_amount DESC) as dense_rank\nFROM product_sales;\n`\n```","properties":{"language":"$undefined"}},{"id":"block-28","type":"heading_3","content":"Running Totals with SUM():","properties":{}},{"id":"block-29","type":"code","content":"```sql\n`\nSELECT\n    order_date,\n    daily_revenue,\n    SUM(daily_revenue) OVER (ORDER BY order_date) as running_total\nFROM daily_sales\nORDER BY order_date;\n`\n```","properties":{"language":"$undefined"}},{"id":"block-30","type":"heading_3","content":"LAG() and LEAD() - Comparing with Previous/Next Rows:","properties":{}},{"id":"block-31","type":"code","content":"```sql\n`\nSELECT\n    month,\n    revenue,\n    LAG(revenue) OVER (ORDER BY month) as previous_month,\n    revenue - LAG(revenue) OVER (ORDER BY month) as growth\nFROM monthly_revenue;\n`\n```","properties":{"language":"$undefined"}},{"id":"block-32","type":"divider","content":"---","properties":{}},{"id":"block-33","type":"heading_2","content":"🔍 Common Table Expressions (CTEs)","properties":{}},{"id":"block-34","type":"paragraph","content":"CTEs make complex queries more readable by breaking them into logical parts.","properties":{}},{"id":"block-35","type":"heading_3","content":"Basic CTE:","properties":{}},{"id":"block-36","type":"code","content":"```sql\n`\nWITH high_value_customers AS (\n    SELECT user_id, SUM(total_amount) as total_spent\n    FROM orders\n    GROUP BY user_id\n    HAVING SUM(total_amount) > 1000\n)\nSELECT u.name, hvc.total_spent\nFROM high_value_customers hvc\nJOIN users u ON hvc.user_id = u.id;\n`\n```","properties":{"language":"$undefined"}},{"id":"block-37","type":"heading_3","content":"Recursive CTE - Organizational Hierarchy:","properties":{}},{"id":"block-38","type":"code","content":"```sql\n`\nWITH RECURSIVE employee_hierarchy AS (\n    -- Base case: top-level managers\n    SELECT id, name, manager_id, 1 as level\n    FROM employees\n    WHERE manager_id IS NULL\n\n    UNION ALL\n\n    -- Recursive case: employees with managers\n    SELECT e.id, e.name, e.manager_id, eh.level + 1\n    FROM employees e\n    JOIN employee_hierarchy eh ON e.manager_id = eh.id\n)\nSELECT * FROM employee_hierarchy\nORDER BY level, name;\n`\n```","properties":{"language":"$undefined"}},{"id":"block-39","type":"divider","content":"---","properties":{}},{"id":"block-40","type":"heading_2","content":"🎨 Advanced Conditional Logic","properties":{}},{"id":"block-41","type":"heading_3","content":"CASE Statements:","properties":{}},{"id":"block-42","type":"code","content":"```sql\n`\nSELECT\n    name,\n    age,\n    CASE\n        WHEN age < 18 THEN 'Minor'\n        WHEN age BETWEEN 18 AND 65 THEN 'Adult'\n        ELSE 'Senior'\n    END as age_category,\n    CASE\n        WHEN total_orders > 50 THEN 'VIP'\n        WHEN total_orders > 20 THEN 'Regular'\n        ELSE 'New'\n    END as customer_tier\nFROM user_summary;\n`\n```","properties":{"language":"$undefined"}},{"id":"block-43","type":"heading_3","content":"Conditional Aggregation:","properties":{}},{"id":"block-44","type":"code","content":"```sql\n`\nSELECT\n    category,\n    COUNT(*) as total_products,\n    COUNT(CASE WHEN in_stock = true THEN 1 END) as in_stock_count,\n    COUNT(CASE WHEN price > 100 THEN 1 END) as premium_count,\n    AVG(CASE WHEN in_stock = true THEN price END) as avg_in_stock_price\nFROM products\nGROUP BY category;\n`\n```","properties":{"language":"$undefined"}},{"id":"block-45","type":"divider","content":"---","properties":{}},{"id":"block-46","type":"heading_2","content":"📊 Subqueries: Queries Within Queries","properties":{}},{"id":"block-47","type":"heading_3","content":"Correlated Subqueries:","properties":{}},{"id":"block-48","type":"code","content":"```sql\n`\n-- Find products that are above average price in their category\nSELECT product_name, price, category\nFROM products p1\nWHERE price > (\n    SELECT AVG(price)\n    FROM products p2\n    WHERE p2.category = p1.category\n);\n`\n```","properties":{"language":"$undefined"}},{"id":"block-49","type":"heading_3","content":"EXISTS vs IN:","properties":{}},{"id":"block-50","type":"code","content":"```sql\n`\n-- Using EXISTS (often more efficient)\nSELECT name FROM users u\nWHERE EXISTS (\n    SELECT 1 FROM orders o\n    WHERE o.user_id = u.id AND o.order_date >= '2024-01-01'\n);\n\n-- Using IN\nSELECT name FROM users\nWHERE id IN (\n    SELECT DISTINCT user_id FROM orders\n    WHERE order_date >= '2024-01-01'\n);\n`\n```","properties":{"language":"$undefined"}},{"id":"block-51","type":"divider","content":"---","properties":{}},{"id":"block-52","type":"heading_2","content":"🔧 Advanced Data Manipulation","properties":{}},{"id":"block-53","type":"heading_3","content":"UPSERT (INSERT ... ON CONFLICT):","properties":{}},{"id":"block-54","type":"code","content":"```sql\n`\n-- PostgreSQL syntax\nINSERT INTO user_stats (user_id, login_count, last_login)\nVALUES (123, 1, NOW())\nON CONFLICT (user_id)\nDO UPDATE SET\n    login_count = user_stats.login_count + 1,\n    last_login = NOW();\n`\n```","properties":{"language":"$undefined"}},{"id":"block-55","type":"heading_3","content":"Bulk Updates with JOINs:","properties":{}},{"id":"block-56","type":"code","content":"```sql\n`\nUPDATE products\nSET discount_percentage = 15\nFROM (\n    SELECT category\n    FROM category_performance\n    WHERE sales_last_month < 1000\n) low_performing\nWHERE products.category = low_performing.category;\n`\n```","properties":{"language":"$undefined"}},{"id":"block-57","type":"heading_3","content":"DELETE with JOINs:","properties":{}},{"id":"block-58","type":"code","content":"```sql\n`\n-- Delete orders from inactive users\nDELETE o FROM orders o\nJOIN users u ON o.user_id = u.id\nWHERE u.active = false AND u.last_login < '2023-01-01';\n`\n```","properties":{"language":"$undefined"}},{"id":"block-59","type":"divider","content":"---","properties":{}},{"id":"block-60","type":"heading_2","content":"📈 Performance Optimization Techniques","properties":{}},{"id":"block-61","type":"heading_3","content":"Using EXPLAIN to Analyze Queries:","properties":{}},{"id":"block-62","type":"code","content":"```sql\n`\nEXPLAIN ANALYZE\nSELECT u.name, COUNT(o.id) as order_count\nFROM users u\nLEFT JOIN orders o ON u.id = o.user_id\nGROUP BY u.id, u.name\nHAVING COUNT(o.id) > 5;\n`\n```","properties":{"language":"$undefined"}},{"id":"block-63","type":"heading_3","content":"Index Optimization:","properties":{}},{"id":"block-64","type":"code","content":"```sql\n`\n-- Create composite index for common query patterns\nCREATE INDEX idx_orders_user_date ON orders(user_id, order_date);\n\n-- Partial index for specific conditions\nCREATE INDEX idx_active_users ON users(email) WHERE active = true;\n`\n```","properties":{"language":"$undefined"}},{"id":"block-65","type":"heading_3","content":"Query Hints and Optimization:","properties":{}},{"id":"block-66","type":"code","content":"```sql\n`\n-- Force index usage (MySQL)\nSELECT * FROM users USE INDEX (idx_email) WHERE email = 'user@example.com';\n\n-- Optimize with specific JOIN order\nSELECT /*+ USE_NL(u o) */ u.name, o.total\nFROM users u\nJOIN orders o ON u.id = o.user_id;\n`\n```","properties":{"language":"$undefined"}},{"id":"block-67","type":"divider","content":"---","properties":{}},{"id":"block-68","type":"heading_2","content":"🧮 Advanced Aggregation Patterns","properties":{}},{"id":"block-69","type":"heading_3","content":"ROLLUP for Subtotals:","properties":{}},{"id":"block-70","type":"code","content":"```sql\n`\nSELECT\n    COALESCE(category, 'TOTAL') as category,\n    COALESCE(brand, 'ALL BRANDS') as brand,\n    SUM(sales) as total_sales\nFROM product_sales\nGROUP BY ROLLUP(category, brand)\nORDER BY category, brand;\n`\n```","properties":{"language":"$undefined"}},{"id":"block-71","type":"heading_3","content":"Pivot Tables with CASE:","properties":{}},{"id":"block-72","type":"code","content":"```sql\n`\nSELECT\n    product_id,\n    SUM(CASE WHEN EXTRACT(MONTH FROM sale_date) = 1 THEN amount ELSE 0 END) as jan_sales,\n    SUM(CASE WHEN EXTRACT(MONTH FROM sale_date) = 2 THEN amount ELSE 0 END) as feb_sales,\n    SUM(CASE WHEN EXTRACT(MONTH FROM sale_date) = 3 THEN amount ELSE 0 END) as mar_sales\nFROM sales\nGROUP BY product_id;\n`\n```","properties":{"language":"$undefined"}},{"id":"block-73","type":"divider","content":"---","properties":{}},{"id":"block-74","type":"heading_2","content":"🔐 Advanced Security Practices","properties":{}},{"id":"block-75","type":"heading_3","content":"Row-Level Security:","properties":{}},{"id":"block-76","type":"code","content":"```sql\n`\n-- Create policy to restrict data access\nCREATE POLICY user_data_policy ON orders\nFOR ALL TO application_role\nUSING (user_id = current_setting('app.current_user_id')::INTEGER);\n`\n```","properties":{"language":"$undefined"}},{"id":"block-77","type":"heading_3","content":"Parameterized Queries (Application Level):","properties":{}},{"id":"block-78","type":"code","content":"```javascript\n`\n// Node.js example with prepared statements\nconst query = `\n    SELECT * FROM users\n    WHERE email = $1 AND created_at >= $2\n`;\nconst result = await client.query(query, [email, startDate]);\n`\n```","properties":{"language":"$undefined"}},{"id":"block-79","type":"divider","content":"---","properties":{}},{"id":"block-80","type":"heading_2","content":"✅ Advanced Best Practices Checklist","properties":{}},{"id":"block-81","type":"paragraph","content":"✔️ **Use HAVING for filtering grouped data, WHERE for individual rows**","properties":{}},{"id":"block-82","type":"paragraph","content":"✔️ **Leverage window functions instead of self-joins when possible**","properties":{}},{"id":"block-83","type":"paragraph","content":"✔️ **Break complex queries into CTEs for better readability**","properties":{}},{"id":"block-84","type":"paragraph","content":"✔️ **Use EXISTS instead of IN for better performance with large datasets**","properties":{}},{"id":"block-85","type":"paragraph","content":"✔️ **Create appropriate indexes for your query patterns**","properties":{}},{"id":"block-86","type":"paragraph","content":"✔️ **Always use EXPLAIN to understand query execution plans**","properties":{}},{"id":"block-87","type":"paragraph","content":"✔️ **Implement proper error handling and transaction management**","properties":{}},{"id":"block-88","type":"paragraph","content":"✔️ **Use parameterized queries to prevent SQL injection**","properties":{}},{"id":"block-89","type":"divider","content":"---","properties":{}},{"id":"block-90","type":"heading_2","content":"🧠 Conclusion","properties":{}},{"id":"block-91","type":"paragraph","content":"Advanced SQL techniques unlock the full power of relational databases. By mastering window functions, CTEs, complex joins, and optimization strategies, you can handle sophisticated data analysis and build more efficient applications.","properties":{}},{"id":"block-92","type":"paragraph","content":"Remember that with great power comes great responsibility—always test complex queries thoroughly and consider their performance impact on production systems. The key to SQL mastery is practice and understanding when to apply each technique for maximum effectiveness.","properties":{}}]}]}],["$","div",null,{"className":"post-meta","children":[["$","div",null,{"className":"post-date","children":[["$","svg",null,{"xmlns":"http://www.w3.org/2000/svg","width":24,"height":24,"viewBox":"0 0 24 24","fill":"none","stroke":"currentColor","strokeWidth":2,"strokeLinecap":"round","strokeLinejoin":"round","className":"lucide lucide-calendar h-4 w-4","children":[["$","rect","eu3xkr",{"width":"18","height":"18","x":"3","y":"4","rx":"2","ry":"2"}],["$","line","m3sa8f",{"x1":"16","x2":"16","y1":"2","y2":"6"}],["$","line","18kwsl",{"x1":"8","x2":"8","y1":"2","y2":"6"}],["$","line","xt86sb",{"x1":"3","x2":"21","y1":"10","y2":"10"}],"$undefined"]}],["$","span",null,{"children":"May 24, 2025"}]]}],["$","div",null,{"className":"post-tags","children":[["$","svg",null,{"xmlns":"http://www.w3.org/2000/svg","width":24,"height":24,"viewBox":"0 0 24 24","fill":"none","stroke":"currentColor","strokeWidth":2,"strokeLinecap":"round","strokeLinejoin":"round","className":"lucide lucide-tag h-4 w-4","children":[["$","path","14b2ls",{"d":"M12 2H2v10l9.29 9.29c.94.94 2.48.94 3.42 0l6.58-6.58c.94-.94.94-2.48 0-3.42L12 2Z"}],["$","path","7u93v4",{"d":"M7 7h.01"}],"$undefined"]}],["$","div",null,{"className":"flex gap-2","children":[["$","span","Databases",{"className":"post-tag","children":["#","Databases"]}],["$","span","sql",{"className":"post-tag","children":["#","sql"]}]]}]]}]]}]]}]}]
