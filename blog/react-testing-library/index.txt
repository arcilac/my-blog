3:I[5613,[],""]
5:I[31778,[],""]
6:I[70269,["250","static/chunks/250-f66e98452b80d3d3.js","185","static/chunks/app/layout-eeb53c07ffb10a3f.js"],"ThemeProvider"]
7:I[63186,["250","static/chunks/250-f66e98452b80d3d3.js","185","static/chunks/app/layout-eeb53c07ffb10a3f.js"],""]
8:I[69148,["250","static/chunks/250-f66e98452b80d3d3.js","185","static/chunks/app/layout-eeb53c07ffb10a3f.js"],""]
4:["slug","react-testing-library","d"]
0:["lMtxhImsujvt0dgg-tL8A",[[["",{"children":["blog",{"children":[["slug","react-testing-library","d"],{"children":["__PAGE__?{\"slug\":\"react-testing-library\"}",{}]}]}]},"$undefined","$undefined",true],["",{"children":["blog",{"children":[["slug","react-testing-library","d"],{"children":["__PAGE__",{},["$L1","$L2",null]]},["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","blog","children","$4","children"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":[["$","link","0",{"rel":"stylesheet","href":"/my-blog/_next/static/css/a494df4e6249897d.css","precedence":"next","crossOrigin":""}]]}]]},["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","blog","children"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":null}]]},[null,["$","html",null,{"lang":"en","suppressHydrationWarning":true,"children":[["$","head",null,{"children":[["$","meta",null,{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","link",null,{"rel":"icon","href":"/favicon.ico"}]]}],["$","body",null,{"className":"bg-black text-white min-h-screen flex flex-col","children":["$","$L6",null,{"defaultTheme":"dark","children":["$","div",null,{"className":"flex flex-col min-h-screen","children":[["$","$L7",null,{}],["$","div",null,{"className":"flex-grow","children":["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":"404"}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],"notFoundStyles":[],"styles":null}]}],["$","$L8",null,{}]]}]}]}]]}],null]],[[["$","link","0",{"rel":"stylesheet","href":"/my-blog/_next/static/css/83cc0ea6f102b864.css","precedence":"next","crossOrigin":""}]],"$L9"]]]]
9:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","meta","1",{"charSet":"utf-8"}],["$","title","2",{"children":"Blog"}],["$","meta","3",{"name":"description","content":"A personal blog connected with Notion"}],["$","link","4",{"rel":"icon","href":"/my-blog/favicon.ico","type":"image/x-icon","sizes":"16x16"}]]
1:null
a:I[74366,["644","static/chunks/644-4de71cea8aeaed79.js","852","static/chunks/852-215445fe88778aae.js","308","static/chunks/app/blog/%5Bslug%5D/page-fab3f594c1476cf4.js"],"NotionRenderer"]
2:["$","main",null,{"className":"post-container","children":["$","article",null,{"className":"post-article","children":[null,["$","h1",null,{"className":"post-title","children":"React Testing Library"}],["$","div",null,{"className":"post-content","children":["$","$La",null,{"blocks":[{"id":"block-0","type":"heading_1","content":"A Complete Guide to Modern React Testing","properties":{}},{"id":"block-1","type":"heading_2","content":"What is React Testing Library?","properties":{}},{"id":"block-2","type":"paragraph","content":"React Testing Library (RTL) is a lightweight solution for testing React components. Created by Kent C. Dodds, it's part of the larger Testing Library family that promotes testing best practices across different JavaScript frameworks. Unlike other testing libraries that focus on implementation details, RTL encourages testing your applications in the way users actually interact with them.","properties":{}},{"id":"block-3","type":"paragraph","content":"The philosophy behind RTL can be summarized in its guiding principle:","properties":{}},{"id":"block-4","type":"quote","content":"> The more your tests resemble the way your software is used, the more confidence they can give you.","properties":{}},{"id":"block-5","type":"heading_2","content":"Why Choose React Testing Library?","properties":{}},{"id":"block-6","type":"heading_3","content":"1. User-Centric Testing","properties":{}},{"id":"block-7","type":"paragraph","content":"RTL shifts the testing focus from implementation details (like component state or methods) to user behavior. This means:","properties":{}},{"id":"block-8","type":"bulleted_list_item","content":"- Tests are more resilient to code refactoring","properties":{}},{"id":"block-9","type":"bulleted_list_item","content":"- You verify what users actually see and interact with","properties":{}},{"id":"block-10","type":"bulleted_list_item","content":"- Your tests better reflect real user scenarios","properties":{}},{"id":"block-11","type":"heading_3","content":"2. Accessibility-Focused Queries","properties":{}},{"id":"block-12","type":"paragraph","content":"One of RTL's standout features is its query system, which prioritizes accessibility:","properties":{}},{"id":"block-13","type":"bulleted_list_item","content":"- `getByRole`: Find elements by their ARIA role, simulating how screen readers interact with your app","properties":{}},{"id":"block-14","type":"bulleted_list_item","content":"- `getByLabelText`: Find form elements by their associated label text","properties":{}},{"id":"block-15","type":"bulleted_list_item","content":"- `getByText`: Find elements by their text content, mimicking how users scan a page","properties":{}},{"id":"block-16","type":"bulleted_list_item","content":"- `getByAltText`: Find elements with alt text, like images","properties":{}},{"id":"block-17","type":"paragraph","content":"These queries encourage accessible markup while making your tests more robust.","properties":{}},{"id":"block-18","type":"heading_3","content":"3. Simpler Test Structure","properties":{}},{"id":"block-19","type":"paragraph","content":"RTL tests typically follow a clear pattern:","properties":{}},{"id":"block-20","type":"numbered_list_item","content":"1. Render a component","properties":{}},{"id":"block-21","type":"numbered_list_item","content":"2. Find elements the user would interact with","properties":{}},{"id":"block-22","type":"numbered_list_item","content":"3. Interact with those elements","properties":{}},{"id":"block-23","type":"numbered_list_item","content":"4. Assert on the expected outcome","properties":{}},{"id":"block-24","type":"paragraph","content":"This clarity makes tests easier to write, understand, and maintain.","properties":{}},{"id":"block-25","type":"heading_2","content":"Getting Started with React Testing Library","properties":{}},{"id":"block-26","type":"heading_3","content":"Installation","properties":{}},{"id":"block-27","type":"paragraph","content":"To add RTL to your React project:","properties":{}},{"id":"block-28","type":"code","content":"```shell\nnpm install --save-dev @testing-library/react @testing-library/jest-dom\n```","properties":{"language":"$undefined"}},{"id":"block-29","type":"paragraph","content":"Or with yarn:","properties":{}},{"id":"block-30","type":"code","content":"```shell\nyarn add --dev @testing-library/react @testing-library/jest-dom\n```","properties":{"language":"$undefined"}},{"id":"block-31","type":"heading_3","content":"Basic Test Example","properties":{}},{"id":"block-32","type":"paragraph","content":"Here's a simple example of testing a counter component:","properties":{}},{"id":"block-33","type":"code","content":"```javascript\n`\n// Counter.js\nimport React, { useState } from 'react';\n\nfunction Counter() {\n  const [count, setCount] = useState(0);\n\n  return (\n    <div>\n      <h1>Count: {count}</h1>\n      <button onClick={() => setCount(count + 1)}>Increment</button>\n      <button onClick={() => setCount(count - 1)}>Decrement</button>\n    </div>\n  );\n}\n\nexport default Counter;\n`\n```","properties":{"language":"$undefined"}},{"id":"block-34","type":"paragraph","content":"And here's how you would test it:","properties":{}},{"id":"block-35","type":"code","content":"```javascript\n`\n// Counter.test.js\nimport React from 'react';\nimport { render, screen, fireEvent } from '@testing-library/react';\nimport Counter from './Counter';\n\ntest('counter increments and decrements when buttons are clicked', () => {\n  render(<Counter />);\n\n  // Check initial state\n  expect(screen.getByText('Count: 0')).toBeInTheDocument();\n\n  // Click increment button and verify count\n  fireEvent.click(screen.getByText('Increment'));\n  expect(screen.getByText('Count: 1')).toBeInTheDocument();\n\n  // Click decrement button and verify count\n  fireEvent.click(screen.getByText('Decrement'));\n  expect(screen.getByText('Count: 0')).toBeInTheDocument();\n});\n`\n```","properties":{"language":"$undefined"}},{"id":"block-36","type":"heading_2","content":"Key Features and Concepts","properties":{}},{"id":"block-37","type":"heading_3","content":"Query Variants","properties":{}},{"id":"block-38","type":"paragraph","content":"RTL provides several variants for each query method:","properties":{}},{"id":"block-39","type":"table","content":"| Variant         | Description                         | Error Behavior                                       |\n| --------------- | ----------------------------------- | ---------------------------------------------------- |\n| `getBy...`      | Returns the matching node           | Throws error if no match or multiple matches         |\n| `queryBy...`    | Returns the matching node           | Returns null if no match, throws on multiple matches |\n| `findBy...`     | Returns a Promise                   | Resolves when element appears, rejects on timeout    |\n| `getAllBy...`   | Returns array of all matching nodes | Throws error if no matches                           |\n| `queryAllBy...` | Returns array of all matching nodes | Returns empty array if no matches                    |\n| `findAllBy...`  | Returns a Promise                   | Resolves to array of elements, rejects on timeout    |","properties":{}},{"id":"block-39-0","type":"table_row","content":"","properties":{}},{"id":"block-39-1","type":"table_row","content":"","properties":{}},{"id":"block-39-2","type":"table_row","content":"","properties":{}},{"id":"block-39-3","type":"table_row","content":"","properties":{}},{"id":"block-39-4","type":"table_row","content":"","properties":{}},{"id":"block-39-5","type":"table_row","content":"","properties":{}},{"id":"block-39-6","type":"table_row","content":"","properties":{}},{"id":"block-40","type":"heading_3","content":"User Interactions","properties":{}},{"id":"block-41","type":"paragraph","content":"RTL provides utilities to simulate user interactions:","properties":{}},{"id":"block-42","type":"code","content":"```javascript\n`\nimport { fireEvent, userEvent } from '@testing-library/react';\n\n// Using fireEvent (simple events)\nfireEvent.click(button);\nfireEvent.change(input, { target: { value: 'new text' } });\n\n// Using userEvent (more realistic event sequences)\n// Note: Import from '@testing-library/user-event'\nawait userEvent.type(input, 'Hello, world!');\nawait userEvent.selectOptions(select, 'option-1');\n`\n```","properties":{"language":"$undefined"}},{"id":"block-43","type":"paragraph","content":"The newer `userEvent` API is recommended as it more closely simulates real browser behavior.","properties":{}},{"id":"block-44","type":"heading_3","content":"Testing Asynchronous Code","properties":{}},{"id":"block-45","type":"paragraph","content":"For testing components with async behaviors:","properties":{}},{"id":"block-46","type":"code","content":"```javascript\n`\ntest('loads and displays user data', async () => {\n  render(<UserProfile userId=\"123\" />);\n\n  // Initially shows loading state\n  expect(screen.getByText('Loading...')).toBeInTheDocument();\n\n  // Wait for the user name to appear\n  const userName = await screen.findByText('Jane Doe');\n  expect(userName).toBeInTheDocument();\n});\n`\n```","properties":{"language":"$undefined"}},{"id":"block-47","type":"heading_2","content":"Advanced Testing Patterns","properties":{}},{"id":"block-48","type":"heading_3","content":"Testing Forms","properties":{}},{"id":"block-49","type":"code","content":"```javascript\n`\ntest('submitting the form calls onSubmit with user data', async () => {\n  const handleSubmit = jest.fn();\n\n  render(<LoginForm onSubmit={handleSubmit} />);\n\n  // Fill out the form\n  await userEvent.type(screen.getByLabelText(/username/i), 'testuser');\n  await userEvent.type(screen.getByLabelText(/password/i), 'password123');\n\n  // Submit the form\n  await userEvent.click(screen.getByRole('button', { name: /submit/i }));\n\n  // Assert form submission\n  expect(handleSubmit).toHaveBeenCalledWith({\n    username: 'testuser',\n    password: 'password123'\n  });\n});\n`\n```","properties":{"language":"$undefined"}},{"id":"block-50","type":"heading_3","content":"Testing Custom Hooks","properties":{}},{"id":"block-51","type":"paragraph","content":"To test custom hooks, use the companion `@testing-library/react-hooks` library:","properties":{}},{"id":"block-52","type":"code","content":"```javascript\n`\nimport { renderHook, act } from '@testing-library/react-hooks';\nimport useCounter from './useCounter';\n\ntest('should increment and decrement counter', () => {\n  const { result } = renderHook(() => useCounter());\n\n  // Initial value\n  expect(result.current.count).toBe(0);\n\n  // Increment\n  act(() => {\n    result.current.increment();\n  });\n  expect(result.current.count).toBe(1);\n\n  // Decrement\n  act(() => {\n    result.current.decrement();\n  });\n  expect(result.current.count).toBe(0);\n});\n`\n```","properties":{"language":"$undefined"}},{"id":"block-53","type":"heading_3","content":"Testing React Context","properties":{}},{"id":"block-54","type":"code","content":"```javascript\n`\ntest('displays theme from context', () => {\n  render(\n    <ThemeProvider initialTheme=\"dark\">\n      <ThemeDisplay />\n    </ThemeProvider>\n  );\n\n  expect(screen.getByText(/current theme: dark/i)).toBeInTheDocument();\n});\n`\n```","properties":{"language":"$undefined"}},{"id":"block-55","type":"heading_2","content":"Best Practices","properties":{}},{"id":"block-56","type":"heading_3","content":"1. Test Behavior, Not Implementation","properties":{}},{"id":"block-57","type":"paragraph","content":"Focus on what your component does, not how it's built:","properties":{}},{"id":"block-58","type":"code","content":"```javascript\n`\n// ❌ Bad: Testing implementation details\ntest('sets isOpen state to true', () => {\n  const { result } = renderHook(() => useState(false));\n  act(() => {\n    result.current[1](true);\n  });\n  expect(result.current[0]).toBe(true);\n});\n\n// ✅ Good: Testing user-facing behavior\ntest('opens dropdown when button is clicked', () => {\n  render(<Dropdown />);\n  const button = screen.getByRole('button', { name: /open menu/i });\n\n  // Menu starts closed\n  expect(screen.queryByRole('menu')).not.toBeInTheDocument();\n\n  // Click to open\n  userEvent.click(button);\n\n  // Menu is now visible\n  expect(screen.getByRole('menu')).toBeInTheDocument();\n});\n`\n```","properties":{"language":"$undefined"}},{"id":"block-59","type":"heading_3","content":"2. Write Accessible Components","properties":{}},{"id":"block-60","type":"paragraph","content":"RTL's query methods encourage accessible markup. If you struggle to select elements in your tests, your UI might have accessibility issues.","properties":{}},{"id":"block-61","type":"heading_3","content":"3. Keep Tests Simple and Readable","properties":{}},{"id":"block-62","type":"paragraph","content":"Use descriptive test names and minimize complexity:","properties":{}},{"id":"block-63","type":"code","content":"```javascript\n`\n// ✅ Good test name\ntest('allows users to add items to their shopping cart', () => {\n  // ...\n});\n\n// ❌ Vague test name\ntest('cart works', () => {\n  // ...\n});\n`\n```","properties":{"language":"$undefined"}},{"id":"block-64","type":"heading_2","content":"Common Pitfalls and Solutions","properties":{}},{"id":"block-65","type":"heading_3","content":"1. Overusing `container.querySelector`","properties":{}},{"id":"block-66","type":"code","content":"```javascript\n`\n// ❌ Avoid: Using DOM queries directly\nconst { container } = render(<MyComponent />);\nconst button = container.querySelector('.submit-button');\n\n// ✅ Better: Using RTL queries\nconst button = screen.getByRole('button', { name: /submit/i });\n`\n```","properties":{"language":"$undefined"}},{"id":"block-67","type":"heading_3","content":"2. Testing Library-Specific Code","properties":{}},{"id":"block-68","type":"code","content":"```javascript\n`\n// ❌ Avoid: Adding test-specific attributes\n<button data-testid=\"submit-button\">Submit</button>\n\n// ✅ Better: Using semantic HTML that's naturally queryable\n<button type=\"submit\">Submit</button>\n`\n```","properties":{"language":"$undefined"}},{"id":"block-69","type":"paragraph","content":"While `data-testid` is supported, it should be used sparingly.","properties":{}},{"id":"block-70","type":"heading_3","content":"3. Not Cleaning Up After Tests","properties":{}},{"id":"block-71","type":"paragraph","content":"RTL automatically cleans up after each test with `cleanup()`, but if you're doing manual DOM manipulations, make sure to clean up.","properties":{}},{"id":"block-72","type":"heading_2","content":"Conclusion","properties":{}},{"id":"block-73","type":"paragraph","content":"React Testing Library has transformed how React applications are tested by promoting a user-centric approach that builds confidence in your application's behavior. By focusing on how users interact with your application rather than implementation details, RTL helps create tests that are more maintainable, accessible, and representative of real-world usage.","properties":{}},{"id":"block-74","type":"paragraph","content":"Whether you're writing unit tests for individual components or integration tests across your application, the principles and tools provided by RTL encourage testing practices that lead to more robust and user-friendly React applications.","properties":{}},{"id":"block-75","type":"paragraph","content":"Start testing your components the way users interact with them, and experience the confidence that comes from knowing your application works for the people who use it.","properties":{}}]}]}],["$","div",null,{"className":"post-meta","children":[["$","div",null,{"className":"post-date","children":[["$","svg",null,{"xmlns":"http://www.w3.org/2000/svg","width":24,"height":24,"viewBox":"0 0 24 24","fill":"none","stroke":"currentColor","strokeWidth":2,"strokeLinecap":"round","strokeLinejoin":"round","className":"lucide lucide-calendar h-4 w-4","children":[["$","rect","eu3xkr",{"width":"18","height":"18","x":"3","y":"4","rx":"2","ry":"2"}],["$","line","m3sa8f",{"x1":"16","x2":"16","y1":"2","y2":"6"}],["$","line","18kwsl",{"x1":"8","x2":"8","y1":"2","y2":"6"}],["$","line","xt86sb",{"x1":"3","x2":"21","y1":"10","y2":"10"}],"$undefined"]}],["$","span",null,{"children":"April 19, 2025"}]]}],["$","div",null,{"className":"post-tags","children":[["$","svg",null,{"xmlns":"http://www.w3.org/2000/svg","width":24,"height":24,"viewBox":"0 0 24 24","fill":"none","stroke":"currentColor","strokeWidth":2,"strokeLinecap":"round","strokeLinejoin":"round","className":"lucide lucide-tag h-4 w-4","children":[["$","path","14b2ls",{"d":"M12 2H2v10l9.29 9.29c.94.94 2.48.94 3.42 0l6.58-6.58c.94-.94.94-2.48 0-3.42L12 2Z"}],["$","path","7u93v4",{"d":"M7 7h.01"}],"$undefined"]}],["$","div",null,{"className":"flex gap-2","children":[["$","span","testing",{"className":"post-tag","children":["#","testing"]}],["$","span","react",{"className":"post-tag","children":["#","react"]}]]}]]}]]}]]}]}]
