3:I[5613,[],""]
5:I[31778,[],""]
6:I[70269,["250","static/chunks/250-f66e98452b80d3d3.js","185","static/chunks/app/layout-eeb53c07ffb10a3f.js"],"ThemeProvider"]
7:I[63186,["250","static/chunks/250-f66e98452b80d3d3.js","185","static/chunks/app/layout-eeb53c07ffb10a3f.js"],""]
8:I[69148,["250","static/chunks/250-f66e98452b80d3d3.js","185","static/chunks/app/layout-eeb53c07ffb10a3f.js"],""]
4:["slug","scope-vs-block-scope","d"]
0:["6PJ0KbyGIdJvgwrODRBpQ",[[["",{"children":["blog",{"children":[["slug","scope-vs-block-scope","d"],{"children":["__PAGE__?{\"slug\":\"scope-vs-block-scope\"}",{}]}]}]},"$undefined","$undefined",true],["",{"children":["blog",{"children":[["slug","scope-vs-block-scope","d"],{"children":["__PAGE__",{},["$L1","$L2",null]]},["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","blog","children","$4","children"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":[["$","link","0",{"rel":"stylesheet","href":"/my-blog/_next/static/css/a494df4e6249897d.css","precedence":"next","crossOrigin":""}]]}]]},["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","blog","children"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":null}]]},[null,["$","html",null,{"lang":"en","suppressHydrationWarning":true,"children":[["$","head",null,{"children":[["$","meta",null,{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","link",null,{"rel":"icon","href":"/favicon.ico"}]]}],["$","body",null,{"className":"bg-black text-white min-h-screen flex flex-col","children":["$","$L6",null,{"defaultTheme":"dark","children":["$","div",null,{"className":"flex flex-col min-h-screen","children":[["$","$L7",null,{}],["$","div",null,{"className":"flex-grow","children":["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":"404"}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],"notFoundStyles":[],"styles":null}]}],["$","$L8",null,{}]]}]}]}]]}],null]],[[["$","link","0",{"rel":"stylesheet","href":"/my-blog/_next/static/css/83cc0ea6f102b864.css","precedence":"next","crossOrigin":""}]],"$L9"]]]]
9:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","meta","1",{"charSet":"utf-8"}],["$","title","2",{"children":"Blog"}],["$","meta","3",{"name":"description","content":"A personal blog connected with Notion"}],["$","link","4",{"rel":"icon","href":"/my-blog/favicon.ico","type":"image/x-icon","sizes":"16x16"}]]
1:null
a:I[74366,["644","static/chunks/644-4de71cea8aeaed79.js","852","static/chunks/852-215445fe88778aae.js","308","static/chunks/app/blog/%5Bslug%5D/page-fab3f594c1476cf4.js"],"NotionRenderer"]
2:["$","main",null,{"className":"post-container","children":["$","article",null,{"className":"post-article","children":[null,["$","h1",null,{"className":"post-title","children":"Scope vs Block Scope in JavaScript: Know the Difference"}],["$","div",null,{"className":"post-content","children":["$","$La",null,{"blocks":[{"id":"block-0","type":"paragraph","content":"When learning JavaScript, one of the most important concepts to understand is **scope**. But as the language evolved, new keywords like `let` and `const` introduced a twist: **block scope**.","properties":{}},{"id":"block-1","type":"paragraph","content":"In this post, we‚Äôll break down what scope is, what block scope means, and how to avoid common mistakes when working with variables in JavaScript.","properties":{}},{"id":"block-2","type":"divider","content":"---","properties":{}},{"id":"block-3","type":"heading_2","content":"üß† What Is Scope?","properties":{}},{"id":"block-4","type":"paragraph","content":"Scope is the area of your code where a variable is **accessible**.","properties":{}},{"id":"block-5","type":"paragraph","content":"There are three main types of scope in JavaScript:","properties":{}},{"id":"block-6","type":"bulleted_list_item","content":"- **Global scope** ‚Äî accessible everywhere","properties":{}},{"id":"block-7","type":"bulleted_list_item","content":"- **Function scope** ‚Äî accessible only inside a specific function","properties":{}},{"id":"block-8","type":"bulleted_list_item","content":"- **Block scope** ‚Äî accessible only inside a specific block (like `{ }`)","properties":{}},{"id":"block-9","type":"paragraph","content":"Example of global vs function scope:","properties":{}},{"id":"block-10","type":"code","content":"```javascript\n`\nvar name = 'Maria'; // Global\n\nfunction greet() {\n  var message = 'Hello ' + name; // Function scoped\n  console.log(message);\n}\n\ngreet();            // \"Hello Maria\"\nconsole.log(name);  // \"Maria\"\nconsole.log(message); // ReferenceError\n\n`\n```","properties":{"language":"$undefined"}},{"id":"block-11","type":"paragraph","content":"Here, `message` is only accessible inside the `greet` function.","properties":{}},{"id":"block-12","type":"divider","content":"---","properties":{}},{"id":"block-13","type":"heading_2","content":"üîê What Is Block Scope?","properties":{}},{"id":"block-14","type":"paragraph","content":"Block scope was introduced in ES6 with `let` and `const`. It limits variable visibility to the block where it's defined (for example, inside an `if` or `for` statement).","properties":{}},{"id":"block-15","type":"code","content":"```javascript\n`\n{\n  let a = 10;\n  const b = 20;\n  var c = 30;\n}\n\nconsole.log(a); // ReferenceError\nconsole.log(b); // ReferenceError\nconsole.log(c); // 30\n\n`\n```","properties":{"language":"$undefined"}},{"id":"block-16","type":"bulleted_list_item","content":"- `a` and `b` are block-scoped: not accessible outside the `{ }`","properties":{}},{"id":"block-17","type":"bulleted_list_item","content":"- `c` is function-scoped: still accessible because `var` ignores block scope","properties":{}},{"id":"block-18","type":"divider","content":"---","properties":{}},{"id":"block-19","type":"heading_2","content":"üß© Function Scope vs Block Scope","properties":{}},{"id":"block-20","type":"paragraph","content":"Let‚Äôs look at a comparison:","properties":{}},{"id":"block-21","type":"code","content":"```javascript\n`\nfunction test() {\n  if (true) {\n    var x = 1;\n    let y = 2;\n    const z = 3;\n  }\n\n  console.log(x); // 1\n  console.log(y); // ReferenceError\n  console.log(z); // ReferenceError\n}\n\ntest();\n`\n```","properties":{"language":"$undefined"}},{"id":"block-22","type":"paragraph","content":"Inside the `if` block:","properties":{}},{"id":"block-23","type":"bulleted_list_item","content":"- `x` (declared with `var`) is hoisted to the function scope","properties":{}},{"id":"block-24","type":"bulleted_list_item","content":"- `y` and `z` (with `let` and `const`) stay inside the `if` block","properties":{}},{"id":"block-25","type":"paragraph","content":"This is one of the key differences between `var` and the newer keywords.","properties":{}},{"id":"block-26","type":"divider","content":"---","properties":{}},{"id":"block-27","type":"heading_2","content":"‚ö†Ô∏è Common Pitfall: Loops","properties":{}},{"id":"block-28","type":"paragraph","content":"If you‚Äôve ever written a loop and all your event listeners behave the same, block scope fixes that.","properties":{}},{"id":"block-29","type":"paragraph","content":"Example with `var`:","properties":{}},{"id":"block-30","type":"code","content":"```javascript\n`\nfor (var i = 0; i < 3; i++) {\n  setTimeout(() => console.log(i), 1000);\n}\n// Output: 3 3 3\n\n`\n```","properties":{"language":"$undefined"}},{"id":"block-31","type":"paragraph","content":"Now with `let`:","properties":{}},{"id":"block-32","type":"code","content":"```javascript\n`\nfor (let i = 0; i < 3; i++) {\n  setTimeout(() => console.log(i), 1000);\n}\n// Output: 0 1 2\n`\n```","properties":{"language":"$undefined"}},{"id":"block-33","type":"paragraph","content":"`let` creates a new `i` for each loop iteration‚Äîproblem solved.","properties":{}},{"id":"block-34","type":"divider","content":"---","properties":{}},{"id":"block-35","type":"heading_2","content":"‚úÖ Recap","properties":{}},{"id":"block-36","type":"bulleted_list_item","content":"- `var` is function-scoped","properties":{}},{"id":"block-37","type":"bulleted_list_item","content":"- `let` and `const` are block-scoped","properties":{}},{"id":"block-38","type":"bulleted_list_item","content":"- Use `let` and `const` for safer, more predictable code","properties":{}},{"id":"block-39","type":"bulleted_list_item","content":"- Block scope makes it easier to avoid bugs, especially in loops and conditional blocks","properties":{}},{"id":"block-40","type":"divider","content":"---","properties":{}},{"id":"block-41","type":"heading_2","content":"üìå Conclusions","properties":{}},{"id":"block-42","type":"paragraph","content":"Understanding scope helps you write cleaner and less error-prone JavaScript.","properties":{}},{"id":"block-43","type":"paragraph","content":"Function scope was the default for years, but block scope with `let` and `const` is now the recommended way to declare variables.","properties":{}},{"id":"block-44","type":"paragraph","content":"If a variable only needs to live inside an `if`, `for`, or other block, use block scope‚Äîit keeps things tidy and avoids unexpected behavior.","properties":{}}]}]}],["$","div",null,{"className":"post-meta","children":[["$","div",null,{"className":"post-date","children":[["$","svg",null,{"xmlns":"http://www.w3.org/2000/svg","width":24,"height":24,"viewBox":"0 0 24 24","fill":"none","stroke":"currentColor","strokeWidth":2,"strokeLinecap":"round","strokeLinejoin":"round","className":"lucide lucide-calendar h-4 w-4","children":[["$","rect","eu3xkr",{"width":"18","height":"18","x":"3","y":"4","rx":"2","ry":"2"}],["$","line","m3sa8f",{"x1":"16","x2":"16","y1":"2","y2":"6"}],["$","line","18kwsl",{"x1":"8","x2":"8","y1":"2","y2":"6"}],["$","line","xt86sb",{"x1":"3","x2":"21","y1":"10","y2":"10"}],"$undefined"]}],["$","span",null,{"children":"June 16, 2025"}]]}],["$","div",null,{"className":"post-tags","children":[["$","svg",null,{"xmlns":"http://www.w3.org/2000/svg","width":24,"height":24,"viewBox":"0 0 24 24","fill":"none","stroke":"currentColor","strokeWidth":2,"strokeLinecap":"round","strokeLinejoin":"round","className":"lucide lucide-tag h-4 w-4","children":[["$","path","14b2ls",{"d":"M12 2H2v10l9.29 9.29c.94.94 2.48.94 3.42 0l6.58-6.58c.94-.94.94-2.48 0-3.42L12 2Z"}],["$","path","7u93v4",{"d":"M7 7h.01"}],"$undefined"]}],["$","div",null,{"className":"flex gap-2","children":[["$","span","Scope",{"className":"post-tag","children":["#","Scope"]}],["$","span","Block-Scope",{"className":"post-tag","children":["#","Block-Scope"]}]]}]]}]]}]]}]}]
