3:I[5613,[],""]
5:I[31778,[],""]
6:I[70269,["250","static/chunks/250-f66e98452b80d3d3.js","185","static/chunks/app/layout-eeb53c07ffb10a3f.js"],"ThemeProvider"]
7:I[63186,["250","static/chunks/250-f66e98452b80d3d3.js","185","static/chunks/app/layout-eeb53c07ffb10a3f.js"],""]
8:I[69148,["250","static/chunks/250-f66e98452b80d3d3.js","185","static/chunks/app/layout-eeb53c07ffb10a3f.js"],""]
4:["slug","authentication-methods","d"]
0:["XWjWt3qlma3Z2wtK0T4I7",[[["",{"children":["blog",{"children":[["slug","authentication-methods","d"],{"children":["__PAGE__?{\"slug\":\"authentication-methods\"}",{}]}]}]},"$undefined","$undefined",true],["",{"children":["blog",{"children":[["slug","authentication-methods","d"],{"children":["__PAGE__",{},["$L1","$L2",null]]},["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","blog","children","$4","children"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":[["$","link","0",{"rel":"stylesheet","href":"/my-blog/_next/static/css/a494df4e6249897d.css","precedence":"next","crossOrigin":""}]]}]]},["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","blog","children"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":null}]]},[null,["$","html",null,{"lang":"en","suppressHydrationWarning":true,"children":[["$","head",null,{"children":[["$","meta",null,{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","link",null,{"rel":"icon","href":"/favicon.ico"}]]}],["$","body",null,{"className":"bg-black text-white min-h-screen flex flex-col","children":["$","$L6",null,{"defaultTheme":"dark","children":["$","div",null,{"className":"flex flex-col min-h-screen","children":[["$","$L7",null,{}],["$","div",null,{"className":"flex-grow","children":["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":"404"}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],"notFoundStyles":[],"styles":null}]}],["$","$L8",null,{}]]}]}]}]]}],null]],[[["$","link","0",{"rel":"stylesheet","href":"/my-blog/_next/static/css/83cc0ea6f102b864.css","precedence":"next","crossOrigin":""}]],"$L9"]]]]
9:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","meta","1",{"charSet":"utf-8"}],["$","title","2",{"children":"Blog"}],["$","meta","3",{"name":"description","content":"A personal blog connected with Notion"}],["$","link","4",{"rel":"icon","href":"/my-blog/favicon.ico","type":"image/x-icon","sizes":"16x16"}]]
1:null
a:I[74366,["644","static/chunks/644-4de71cea8aeaed79.js","852","static/chunks/852-215445fe88778aae.js","308","static/chunks/app/blog/%5Bslug%5D/page-fab3f594c1476cf4.js"],"NotionRenderer"]
b:T4ed,```javascript
`
// Step 1: Redirect to OAuth provider
app.get('/auth/google', (req, res) => {
  const googleAuthUrl = `https://accounts.google.com/oauth/authorize?` +
    `client_id=${process.env.GOOGLE_CLIENT_ID}&` +
    `redirect_uri=${process.env.REDIRECT_URI}&` +
    `scope=profile email&` +
    `response_type=code`;

  res.redirect(googleAuthUrl);
});

// Step 2: Handle OAuth callback
app.get('/auth/google/callback', async (req, res) => {
  const { code } = req.query;

  // Exchange code for access token
  const tokenResponse = await fetch('https://oauth2.googleapis.com/token', {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({
      client_id: process.env.GOOGLE_CLIENT_ID,
      client_secret: process.env.GOOGLE_CLIENT_SECRET,
      code,
      grant_type: 'authorization_code',
      redirect_uri: process.env.REDIRECT_URI
    })
  });

  const { access_token } = await tokenResponse.json();

  // Get user info with access token
  const userResponse = await fetch(`https://www.googleapis.com/oauth2/v2/userinfo?access_token=${access_token}`);
  const user = await userResponse.json();

  // Create session or JWT for your app
  req.session.user = user;
  res.redirect('/dashboard');
});
`
```2:["$","main",null,{"className":"post-container","children":["$","article",null,{"className":"post-article","children":[null,["$","h1",null,{"className":"post-title","children":"Authentication Methods: JWT vs Sessions vs OAuth - Complete Guide"}],["$","div",null,{"className":"post-content","children":["$","$La",null,{"blocks":[{"id":"block-0","type":"paragraph","content":"When building web applications, choosing the right authentication method is crucial for security and user experience. **JWT**, **Sessions**, and **OAuth** are three popular approaches‚Äîbut they solve different problems and work in different ways.","properties":{}},{"id":"block-1","type":"paragraph","content":"In this article, we'll explore what each method is, when to use them, and how they compare with practical examples.","properties":{}},{"id":"block-2","type":"heading_2","content":"üîê What Is Session-Based Authentication?","properties":{}},{"id":"block-3","type":"paragraph","content":"**Session-based authentication** is the traditional approach where the server stores user information and creates a session after login.","properties":{}},{"id":"block-4","type":"paragraph","content":"How it works:","properties":{}},{"id":"block-5","type":"bulleted_list_item","content":"- User logs in with credentials","properties":{}},{"id":"block-6","type":"bulleted_list_item","content":"- Server creates a session and stores it (in memory, database, or cache)","properties":{}},{"id":"block-7","type":"bulleted_list_item","content":"- Server sends a session ID to the client via cookies","properties":{}},{"id":"block-8","type":"bulleted_list_item","content":"- Client sends the session ID with each request","properties":{}},{"id":"block-9","type":"bulleted_list_item","content":"- Server validates the session ID and retrieves user data","properties":{}},{"id":"block-10","type":"paragraph","content":"","properties":{}},{"id":"block-11","type":"code","content":"```javascript\n`\n// Server-side session creation (Node.js/Express)\napp.post('/login', (req, res) => {\n  const { username, password } = req.body;\n\n  // Validate credentials\n  if (isValidUser(username, password)) {\n    // Create session\n    req.session.userId = user.id;\n    req.session.username = user.username;\n\n    res.json({ message: 'Login successful' });\n  }\n});\n\n// Protected route\napp.get('/profile', (req, res) => {\n  if (req.session.userId) {\n    res.json({ user: req.session.username });\n  } else {\n    res.status(401).json({ error: 'Not authenticated' });\n  }\n});\n`\n```","properties":{"language":"$undefined"}},{"id":"block-12","type":"paragraph","content":"","properties":{}},{"id":"block-13","type":"table","content":"| Pros                                  | Cons                                                     |\n| ------------------------------------- | -------------------------------------------------------- |\n| Simple to implement and understand    | Server must store session data (memory/storage overhead) |\n| Server has full control over sessions | Doesn't scale well across multiple servers               |\n| Easy to revoke access instantly       | Less suitable for mobile apps and APIs                   |\n| Works well for traditional web apps   | Vulnerable to CSRF attacks if not properly secured       |","properties":{}},{"id":"block-13-0","type":"table_row","content":"","properties":{}},{"id":"block-13-1","type":"table_row","content":"","properties":{}},{"id":"block-13-2","type":"table_row","content":"","properties":{}},{"id":"block-13-3","type":"table_row","content":"","properties":{}},{"id":"block-13-4","type":"table_row","content":"","properties":{}},{"id":"block-14","type":"heading_2","content":"üéüÔ∏è What Is JWT (JSON Web Token)?","properties":{}},{"id":"block-15","type":"paragraph","content":"**JWT** is a **stateless** authentication method where user information is encoded in a token that the client stores and sends with each request.","properties":{}},{"id":"block-16","type":"paragraph","content":"A JWT contains three parts:","properties":{}},{"id":"block-17","type":"bulleted_list_item","content":"- **Header**: Token type and signing algorithm","properties":{}},{"id":"block-18","type":"bulleted_list_item","content":"- **Payload**: User data and claims","properties":{}},{"id":"block-19","type":"bulleted_list_item","content":"- **Signature**: Verification signature","properties":{}},{"id":"block-20","type":"paragraph","content":"","properties":{}},{"id":"block-21","type":"code","content":"```javascript\n`\n// Server-side JWT creation\nconst jwt = require('jsonwebtoken');\n\napp.post('/login', (req, res) => {\n  const { username, password } = req.body;\n\n  if (isValidUser(username, password)) {\n    // Create JWT token\n    const token = jwt.sign(\n      {\n        userId: user.id,\n        username: user.username\n      },\n      process.env.JWT_SECRET,\n      { expiresIn: '24h' }\n    );\n\n    res.json({ token });\n  }\n});\n\n// JWT verification middleware\nconst authenticateToken = (req, res, next) => {\n  const authHeader = req.headers['authorization'];\n  const token = authHeader && authHeader.split(' ')[1];\n\n  if (!token) {\n    return res.status(401).json({ error: 'Access denied' });\n  }\n\n  jwt.verify(token, process.env.JWT_SECRET, (err, user) => {\n    if (err) {\n      return res.status(403).json({ error: 'Invalid token' });\n    }\n    req.user = user;\n    next();\n  });\n};\n\n// Protected route\napp.get('/profile', authenticateToken, (req, res) => {\n  res.json({ user: req.user });\n});\n`\n```","properties":{"language":"$undefined"}},{"id":"block-22","type":"paragraph","content":"","properties":{}},{"id":"block-23","type":"table","content":"| Pros                                      | Cons                                          |\n| ----------------------------------------- | --------------------------------------------- |\n| Stateless - no server-side storage needed | Cannot revoke tokens easily before expiration |\n| Scales well across multiple servers       | Tokens can become large with lots of data     |\n| Perfect for APIs and mobile apps          | Vulnerable if token is compromised            |\n| Contains user data in the token itself    | Requires careful secret key management        |\n| Cross-domain friendly                     |                                               |","properties":{}},{"id":"block-23-0","type":"table_row","content":"","properties":{}},{"id":"block-23-1","type":"table_row","content":"","properties":{}},{"id":"block-23-2","type":"table_row","content":"","properties":{}},{"id":"block-23-3","type":"table_row","content":"","properties":{}},{"id":"block-23-4","type":"table_row","content":"","properties":{}},{"id":"block-23-5","type":"table_row","content":"","properties":{}},{"id":"block-24","type":"heading_2","content":"‚òÅÔ∏è What Is OAuth?","properties":{}},{"id":"block-25","type":"paragraph","content":"**OAuth** is an **authorization framework** that lets users grant third-party applications access to their resources without sharing passwords.","properties":{}},{"id":"block-26","type":"paragraph","content":"OAuth is commonly used for:","properties":{}},{"id":"block-27","type":"bulleted_list_item","content":"- \"Login with Google/Facebook/GitHub\"","properties":{}},{"id":"block-28","type":"bulleted_list_item","content":"- API access delegation","properties":{}},{"id":"block-29","type":"bulleted_list_item","content":"- Third-party app permissions","properties":{}},{"id":"block-30","type":"paragraph","content":"","properties":{}},{"id":"block-31","type":"code","content":"$b","properties":{"language":"$undefined"}},{"id":"block-32","type":"paragraph","content":"","properties":{}},{"id":"block-33","type":"table","content":"| Pros                                          | Cons                                |\n| --------------------------------------------- | ----------------------------------- |\n| No password storage required                  | Complex implementation              |\n| Leverages existing user accounts              | Dependent on external providers     |\n| Granular permission scopes                    | Requires internet connectivity      |\n| Secure delegation of access                   | Additional security considerations  |\n| Industry standard for third-party integration | User experience can be inconsistent |","properties":{}},{"id":"block-33-0","type":"table_row","content":"","properties":{}},{"id":"block-33-1","type":"table_row","content":"","properties":{}},{"id":"block-33-2","type":"table_row","content":"","properties":{}},{"id":"block-33-3","type":"table_row","content":"","properties":{}},{"id":"block-33-4","type":"table_row","content":"","properties":{}},{"id":"block-33-5","type":"table_row","content":"","properties":{}},{"id":"block-34","type":"heading_2","content":"üîÑ How They Work Together","properties":{}},{"id":"block-35","type":"paragraph","content":"These methods aren't mutually exclusive. Many applications combine them:","properties":{}},{"id":"block-36","type":"paragraph","content":"**OAuth + JWT Example:**","properties":{}},{"id":"block-37","type":"code","content":"```javascript\n`\n// After OAuth login, create JWT for your app\napp.get('/auth/google/callback', async (req, res) => {\n  // ... OAuth flow ...\n\n  // Create JWT after successful OAuth\n  const token = jwt.sign(\n    {\n      userId: user.id,\n      email: user.email,\n      provider: 'google'\n    },\n    process.env.JWT_SECRET,\n    { expiresIn: '7d' }\n  );\n\n  res.json({ token, user });\n});\n`\n```","properties":{"language":"$undefined"}},{"id":"block-38","type":"paragraph","content":"**OAuth + Sessions Example:**","properties":{}},{"id":"block-39","type":"code","content":"```javascript\n`\n// Store OAuth user in session\napp.get('/auth/github/callback', async (req, res) => {\n  // ... OAuth flow ...\n\n  // Store in session after OAuth\n  req.session.user = {\n    id: user.id,\n    username: user.login,\n    provider: 'github'\n  };\n\n  res.redirect('/dashboard');\n});\n`\n```","properties":{"language":"$undefined"}},{"id":"block-40","type":"paragraph","content":"","properties":{}},{"id":"block-41","type":"paragraph","content":"üéØ When to Use Each Method","properties":{}},{"id":"block-42","type":"table","content":"| Use Case                 | Best Method    | Why                                  |\n| ------------------------ | -------------- | ------------------------------------ |\n| Traditional web app      | **Sessions**   | Simple, secure, full server control  |\n| REST API                 | **JWT**        | Stateless, scalable, mobile-friendly |\n| Mobile app               | **JWT**        | No cookies, easy token storage       |\n| Microservices            | **JWT**        | Stateless, no shared session store   |\n| Third-party login        | **OAuth**      | Secure, no password handling         |\n| Social media integration | **OAuth**      | Access user's external data          |\n| Enterprise SSO           | **OAuth/SAML** | Centralized identity management      |","properties":{}},{"id":"block-42-0","type":"table_row","content":"","properties":{}},{"id":"block-42-1","type":"table_row","content":"","properties":{}},{"id":"block-42-2","type":"table_row","content":"","properties":{}},{"id":"block-42-3","type":"table_row","content":"","properties":{}},{"id":"block-42-4","type":"table_row","content":"","properties":{}},{"id":"block-42-5","type":"table_row","content":"","properties":{}},{"id":"block-42-6","type":"table_row","content":"","properties":{}},{"id":"block-42-7","type":"table_row","content":"","properties":{}},{"id":"block-43","type":"heading_2","content":"üõ°Ô∏è Security Best Practices","properties":{}},{"id":"block-44","type":"paragraph","content":"**For Sessions:**","properties":{}},{"id":"block-45","type":"code","content":"```javascript\n`\n// Secure session configuration\napp.use(session({\n  secret: process.env.SESSION_SECRET,\n  resave: false,\n  saveUninitialized: false,\n  cookie: {\n    secure: process.env.NODE_ENV === 'production', // HTTPS only\n    httpOnly: true, // Prevent XSS\n    maxAge: 24 * 60 * 60 * 1000 // 24 hours\n  }\n}));\n`\n```","properties":{"language":"$undefined"}},{"id":"block-46","type":"paragraph","content":"**For JWT:**","properties":{}},{"id":"block-47","type":"code","content":"```javascript\n`\n// Secure JWT practices\nconst token = jwt.sign(\n  payload,\n  process.env.JWT_SECRET, // Strong secret key\n  {\n    expiresIn: '15m', // Short expiration\n    issuer: 'your-app',\n    audience: 'your-users'\n  }\n);\n\n// Implement refresh tokens\nconst refreshToken = jwt.sign(\n  { userId: user.id },\n  process.env.REFRESH_SECRET,\n  { expiresIn: '7d' }\n);\n`\n```","properties":{"language":"$undefined"}},{"id":"block-48","type":"paragraph","content":"**For OAuth:**","properties":{}},{"id":"block-49","type":"code","content":"```javascript\n`\n// Validate state parameter to prevent CSRF\nconst state = crypto.randomBytes(32).toString('hex');\nreq.session.oauthState = state;\n\nconst authUrl = `${authEndpoint}?state=${state}&...`;\n`\n```","properties":{"language":"$undefined"}},{"id":"block-50","type":"paragraph","content":"üîß Implementation Checklist","properties":{}},{"id":"block-51","type":"paragraph","content":"**Sessions:**","properties":{}},{"id":"block-52","type":"paragraph","content":"‚úÖ¬†Configure secure session store (Redis/Database)","properties":{}},{"id":"block-53","type":"paragraph","content":"‚úÖ¬†Set secure cookie options","properties":{}},{"id":"block-54","type":"paragraph","content":"‚úÖ¬†Implement CSRF protection","properties":{}},{"id":"block-55","type":"paragraph","content":"‚úÖ¬†Handle session cleanup/expiration","properties":{}},{"id":"block-56","type":"paragraph","content":"**JWT:**","properties":{}},{"id":"block-57","type":"paragraph","content":"‚úÖ¬†Use strong secret keys","properties":{}},{"id":"block-58","type":"paragraph","content":"‚úÖ¬†Implement token refresh mechanism","properties":{}},{"id":"block-59","type":"paragraph","content":"‚úÖ¬†Set appropriate expiration times","properties":{}},{"id":"block-60","type":"paragraph","content":"‚úÖ¬†Store tokens securely on client","properties":{}},{"id":"block-61","type":"paragraph","content":"**OAuth:**","properties":{}},{"id":"block-62","type":"paragraph","content":"‚úÖ¬†Register app with OAuth provider","properties":{}},{"id":"block-63","type":"paragraph","content":"‚úÖ¬†Implement state parameter validation","properties":{}},{"id":"block-64","type":"paragraph","content":"‚úÖ¬†Handle error cases and edge scenarios","properties":{}},{"id":"block-65","type":"paragraph","content":"‚úÖ¬†Secure client secrets","properties":{}},{"id":"block-66","type":"heading_2","content":"üìä Performance Comparison","properties":{}},{"id":"block-67","type":"table","content":"| Method       | Server Load            | Scalability | Network Overhead | Complexity |\n| ------------ | ---------------------- | ----------- | ---------------- | ---------- |\n| **Sessions** | High (session storage) | Limited     | Low              | Low        |\n| **JWT**      | Low (stateless)        | Excellent   | Medium           | Medium     |\n| **OAuth**    | Variable               | Good        | High             | High       |","properties":{}},{"id":"block-67-0","type":"table_row","content":"","properties":{}},{"id":"block-67-1","type":"table_row","content":"","properties":{}},{"id":"block-67-2","type":"table_row","content":"","properties":{}},{"id":"block-67-3","type":"table_row","content":"","properties":{}},{"id":"block-68","type":"heading_2","content":"üß† Conclusion","properties":{}},{"id":"block-69","type":"paragraph","content":"**Sessions** work best for traditional web apps, **JWT** excels for APIs and mobile apps, and **OAuth** is essential for third-party integrations. Many modern applications combine these methods‚Äîlike using OAuth for login and JWT for API access. Choose based on your specific needs, but always prioritize security regardless of your choice.","properties":{}}]}]}],["$","div",null,{"className":"post-meta","children":[["$","div",null,{"className":"post-date","children":[["$","svg",null,{"xmlns":"http://www.w3.org/2000/svg","width":24,"height":24,"viewBox":"0 0 24 24","fill":"none","stroke":"currentColor","strokeWidth":2,"strokeLinecap":"round","strokeLinejoin":"round","className":"lucide lucide-calendar h-4 w-4","children":[["$","rect","eu3xkr",{"width":"18","height":"18","x":"3","y":"4","rx":"2","ry":"2"}],["$","line","m3sa8f",{"x1":"16","x2":"16","y1":"2","y2":"6"}],["$","line","18kwsl",{"x1":"8","x2":"8","y1":"2","y2":"6"}],["$","line","xt86sb",{"x1":"3","x2":"21","y1":"10","y2":"10"}],"$undefined"]}],["$","span",null,{"children":"June 9, 2025"}]]}],["$","div",null,{"className":"post-tags","children":[["$","svg",null,{"xmlns":"http://www.w3.org/2000/svg","width":24,"height":24,"viewBox":"0 0 24 24","fill":"none","stroke":"currentColor","strokeWidth":2,"strokeLinecap":"round","strokeLinejoin":"round","className":"lucide lucide-tag h-4 w-4","children":[["$","path","14b2ls",{"d":"M12 2H2v10l9.29 9.29c.94.94 2.48.94 3.42 0l6.58-6.58c.94-.94.94-2.48 0-3.42L12 2Z"}],["$","path","7u93v4",{"d":"M7 7h.01"}],"$undefined"]}],["$","div",null,{"className":"flex gap-2","children":[["$","span","authentication",{"className":"post-tag","children":["#","authentication"]}],["$","span","JavaScript",{"className":"post-tag","children":["#","JavaScript"]}]]}]]}]]}]]}]}]
