3:I[5613,[],""]
5:I[31778,[],""]
6:I[70269,["250","static/chunks/250-f66e98452b80d3d3.js","185","static/chunks/app/layout-b80959e2834ced79.js"],"ThemeProvider"]
7:I[63186,["250","static/chunks/250-f66e98452b80d3d3.js","185","static/chunks/app/layout-b80959e2834ced79.js"],""]
8:I[69148,["250","static/chunks/250-f66e98452b80d3d3.js","185","static/chunks/app/layout-b80959e2834ced79.js"],""]
4:["slug","react-usememo-usecallback","d"]
0:["mF4MjsFj4LUCVXhft3d17",[[["",{"children":["blog",{"children":[["slug","react-usememo-usecallback","d"],{"children":["__PAGE__?{\"slug\":\"react-usememo-usecallback\"}",{}]}]}]},"$undefined","$undefined",true],["",{"children":["blog",{"children":[["slug","react-usememo-usecallback","d"],{"children":["__PAGE__",{},["$L1","$L2",null]]},["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","blog","children","$4","children"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":[["$","link","0",{"rel":"stylesheet","href":"/my-blog/_next/static/css/a494df4e6249897d.css","precedence":"next","crossOrigin":""}]]}]]},["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","blog","children"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":null}]]},[null,["$","html",null,{"lang":"en","suppressHydrationWarning":true,"children":[["$","head",null,{"children":[["$","meta",null,{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","link",null,{"rel":"icon","href":"/favicon.ico"}]]}],["$","body",null,{"className":"bg-black text-white min-h-screen flex flex-col","children":["$","$L6",null,{"defaultTheme":"dark","children":["$","div",null,{"className":"flex flex-col min-h-screen","children":[["$","$L7",null,{}],["$","div",null,{"className":"flex-grow","children":["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":"404"}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],"notFoundStyles":[],"styles":null}]}],["$","$L8",null,{}]]}]}]}]]}],null]],[[["$","link","0",{"rel":"stylesheet","href":"/my-blog/_next/static/css/83cc0ea6f102b864.css","precedence":"next","crossOrigin":""}]],"$L9"]]]]
9:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","meta","1",{"charSet":"utf-8"}],["$","title","2",{"children":"Blog"}],["$","meta","3",{"name":"description","content":"A personal blog connected with Notion"}],["$","link","4",{"rel":"icon","href":"/my-blog/favicon.ico","type":"image/x-icon","sizes":"16x16"}]]
1:null
a:I[74366,["644","static/chunks/644-4de71cea8aeaed79.js","852","static/chunks/852-215445fe88778aae.js","308","static/chunks/app/blog/%5Bslug%5D/page-fab3f594c1476cf4.js"],"NotionRenderer"]
2:["$","main",null,{"className":"post-container","children":["$","article",null,{"className":"post-article","children":[null,["$","h1",null,{"className":"post-title","children":"When to Use useMemo and useCallback in React"}],["$","div",null,{"className":"post-content","children":["$","$La",null,{"blocks":[{"id":"block-0","type":"paragraph","content":"Performance optimization in React often brings up two hooks: `useMemo` and `useCallback`. These can help prevent unnecessary renders, but using them too early or in the wrong places can add needless complexity.","properties":{}},{"id":"block-1","type":"paragraph","content":"Let’s explore when these hooks actually make a difference—and how to use them effectively.","properties":{}},{"id":"block-2","type":"divider","content":"---","properties":{}},{"id":"block-3","type":"heading_3","content":"🚀 What Do useMemo and useCallback Do?","properties":{}},{"id":"block-4","type":"paragraph","content":"Both hooks help **memoize** between renders:","properties":{}},{"id":"block-5","type":"bulleted_list_item","content":"- **`useMemo`** caches the **result of a function**.","properties":{}},{"id":"block-6","type":"bulleted_list_item","content":"- **`useCallback`** caches the **function itself**.","properties":{}},{"id":"block-7","type":"divider","content":"---","properties":{}},{"id":"block-8","type":"heading_3","content":"📦 useMemo: Memoizing Derived Values","properties":{}},{"id":"block-9","type":"paragraph","content":"Use `useMemo` to avoid recalculating expensive values on every render. It only re-computes the value when its dependencies change.","properties":{}},{"id":"block-10","type":"code","content":"```javascript\n`\nconst sortedList = useMemo(() => {\n  return list.sort((a, b) => a.value - b.value);\n}, [list]);\n\n`\n```","properties":{"language":"$undefined"}},{"id":"block-11","type":"paragraph","content":"✅ **Use it when:**","properties":{}},{"id":"block-12","type":"bulleted_list_item","content":"- You're performing **heavy calculations** (e.g., sorting large datasets).","properties":{}},{"id":"block-13","type":"bulleted_list_item","content":"- The computed value is passed as a prop to a child component that relies on referential equality.","properties":{}},{"id":"block-14","type":"paragraph","content":"🚫 **Avoid it when:**","properties":{}},{"id":"block-15","type":"bulleted_list_item","content":"- The computation is cheap.","properties":{}},{"id":"block-16","type":"bulleted_list_item","content":"- The memoized value isn't reused across renders.","properties":{}},{"id":"block-17","type":"divider","content":"---","properties":{}},{"id":"block-18","type":"heading_3","content":"🔁 useCallback: Memoizing Functions","properties":{}},{"id":"block-19","type":"paragraph","content":"`useCallback` is useful when you want to avoid re-creating a function unless its dependencies change. It helps prevent unnecessary re-renders in child components that rely on function reference.","properties":{}},{"id":"block-20","type":"code","content":"```javascript\n`\nconst handleClick = useCallback(() => {\n  doSomething();\n}, [doSomething]);\n\n`\n```","properties":{"language":"$undefined"}},{"id":"block-21","type":"paragraph","content":"✅ **Use it when:**","properties":{}},{"id":"block-22","type":"bulleted_list_item","content":"- You're passing **callback props** to memoized child components (e.g., `React.memo` or `useMemo`).","properties":{}},{"id":"block-23","type":"bulleted_list_item","content":"- The function is **created inside a component** that re-renders frequently.","properties":{}},{"id":"block-24","type":"paragraph","content":"🚫 **Don’t use it just to \"optimize\"—** in many cases, creating the function inline is cheaper and simpler.","properties":{}},{"id":"block-25","type":"divider","content":"---","properties":{}},{"id":"block-26","type":"heading_3","content":"🧪 Real Example: Without useCallback","properties":{}},{"id":"block-27","type":"code","content":"```javascript\n`\nconst Parent = () => {\n  const [count, setCount] = useState(0);\n\n  const handleClick = () => {\n    console.log('Clicked');\n  };\n\n  return <Child onClick={handleClick} />;\n};\n\n`\n```","properties":{"language":"$undefined"}},{"id":"block-28","type":"paragraph","content":"In this case, `handleClick` is recreated on every render, so if `<Child />` is wrapped in `React.memo`, it will still re-render.","properties":{}},{"id":"block-29","type":"heading_3","content":"✅ With useCallback","properties":{}},{"id":"block-30","type":"code","content":"```javascript\n`\nconst handleClick = useCallback(() => {\n  console.log('Clicked');\n}, []);\n\n`\n```","properties":{"language":"$undefined"}},{"id":"block-31","type":"paragraph","content":"Now `handleClick` is memoized and keeps the same reference unless dependencies change, which can help avoid unnecessary child renders.","properties":{}},{"id":"block-32","type":"divider","content":"---","properties":{}},{"id":"block-33","type":"heading_3","content":"🧱 Bonus: React.memo + useCallback","properties":{}},{"id":"block-34","type":"paragraph","content":"Combine `React.memo` and `useCallback` for optimal performance in components that rely on reference equality for props.","properties":{}},{"id":"block-35","type":"code","content":"```javascript\n`\nconst Child = React.memo(({ onClick }) => {\n  return <button onClick={onClick}>Click me</button>;\n});\n\n`\n```","properties":{"language":"$undefined"}},{"id":"block-36","type":"divider","content":"---","properties":{}},{"id":"block-37","type":"heading_3","content":"✅ Summary","properties":{}},{"id":"block-38","type":"table","content":"| Hook          | Purpose                     | Use When…                           |\n| ------------- | --------------------------- | ----------------------------------- |\n| `useMemo`     | Cache a computed value      | Value is expensive or reused        |\n| `useCallback` | Cache a function definition | Passing callbacks to memoized child |","properties":{}},{"id":"block-38-0","type":"table_row","content":"","properties":{}},{"id":"block-38-1","type":"table_row","content":"","properties":{}},{"id":"block-38-2","type":"table_row","content":"","properties":{}},{"id":"block-39","type":"divider","content":"---","properties":{}},{"id":"block-40","type":"heading_3","content":"📌 Conclusion","properties":{}},{"id":"block-41","type":"paragraph","content":"`useMemo` and `useCallback` are powerful tools—but they’re not always necessary. Use them to **solve specific performance issues**, not as a default. Focus first on writing clean, readable code, and then optimize when profiling shows a real need.","properties":{}},{"id":"block-42","type":"paragraph","content":"Used wisely, these hooks can help your React app run smoother and feel snappier—especially at scale.","properties":{}}]}]}],["$","div",null,{"className":"post-meta","children":[["$","div",null,{"className":"post-date","children":[["$","svg",null,{"xmlns":"http://www.w3.org/2000/svg","width":24,"height":24,"viewBox":"0 0 24 24","fill":"none","stroke":"currentColor","strokeWidth":2,"strokeLinecap":"round","strokeLinejoin":"round","className":"lucide lucide-calendar h-4 w-4","children":[["$","rect","eu3xkr",{"width":"18","height":"18","x":"3","y":"4","rx":"2","ry":"2"}],["$","line","m3sa8f",{"x1":"16","x2":"16","y1":"2","y2":"6"}],["$","line","18kwsl",{"x1":"8","x2":"8","y1":"2","y2":"6"}],["$","line","xt86sb",{"x1":"3","x2":"21","y1":"10","y2":"10"}],"$undefined"]}],["$","span",null,{"children":"May 18, 2025"}]]}],["$","div",null,{"className":"post-tags","children":[["$","svg",null,{"xmlns":"http://www.w3.org/2000/svg","width":24,"height":24,"viewBox":"0 0 24 24","fill":"none","stroke":"currentColor","strokeWidth":2,"strokeLinecap":"round","strokeLinejoin":"round","className":"lucide lucide-tag h-4 w-4","children":[["$","path","14b2ls",{"d":"M12 2H2v10l9.29 9.29c.94.94 2.48.94 3.42 0l6.58-6.58c.94-.94.94-2.48 0-3.42L12 2Z"}],["$","path","7u93v4",{"d":"M7 7h.01"}],"$undefined"]}],["$","div",null,{"className":"flex gap-2","children":[["$","span","react",{"className":"post-tag","children":["#","react"]}],["$","span","hooks",{"className":"post-tag","children":["#","hooks"]}]]}]]}]]}]]}]}]
