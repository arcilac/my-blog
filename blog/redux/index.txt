3:I[5613,[],""]
5:I[31778,[],""]
6:I[70269,["250","static/chunks/250-f66e98452b80d3d3.js","185","static/chunks/app/layout-eeb53c07ffb10a3f.js"],"ThemeProvider"]
7:I[63186,["250","static/chunks/250-f66e98452b80d3d3.js","185","static/chunks/app/layout-eeb53c07ffb10a3f.js"],""]
8:I[69148,["250","static/chunks/250-f66e98452b80d3d3.js","185","static/chunks/app/layout-eeb53c07ffb10a3f.js"],""]
4:["slug","redux","d"]
0:["jw5xVmGNn7eV5DN55TS-h",[[["",{"children":["blog",{"children":[["slug","redux","d"],{"children":["__PAGE__?{\"slug\":\"redux\"}",{}]}]}]},"$undefined","$undefined",true],["",{"children":["blog",{"children":[["slug","redux","d"],{"children":["__PAGE__",{},["$L1","$L2",null]]},["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","blog","children","$4","children"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":[["$","link","0",{"rel":"stylesheet","href":"/my-blog/_next/static/css/a494df4e6249897d.css","precedence":"next","crossOrigin":""}]]}]]},["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","blog","children"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":null}]]},[null,["$","html",null,{"lang":"en","suppressHydrationWarning":true,"children":[["$","head",null,{"children":[["$","meta",null,{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","link",null,{"rel":"icon","href":"/favicon.ico"}]]}],["$","body",null,{"className":"bg-black text-white min-h-screen flex flex-col","children":["$","$L6",null,{"defaultTheme":"dark","children":["$","div",null,{"className":"flex flex-col min-h-screen","children":[["$","$L7",null,{}],["$","div",null,{"className":"flex-grow","children":["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":"404"}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],"notFoundStyles":[],"styles":null}]}],["$","$L8",null,{}]]}]}]}]]}],null]],[[["$","link","0",{"rel":"stylesheet","href":"/my-blog/_next/static/css/83cc0ea6f102b864.css","precedence":"next","crossOrigin":""}]],"$L9"]]]]
9:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","meta","1",{"charSet":"utf-8"}],["$","title","2",{"children":"Blog"}],["$","meta","3",{"name":"description","content":"A personal blog connected with Notion"}],["$","link","4",{"rel":"icon","href":"/my-blog/favicon.ico","type":"image/x-icon","sizes":"16x16"}]]
1:null
a:I[74366,["644","static/chunks/644-4de71cea8aeaed79.js","852","static/chunks/852-215445fe88778aae.js","308","static/chunks/app/blog/%5Bslug%5D/page-fab3f594c1476cf4.js"],"NotionRenderer"]
b:T416,```javascript
`
import { createSlice, configureStore } from '@reduxjs/toolkit';

// Create a slice
const counterSlice = createSlice({
  name: 'counter',
  initialState: { count: 0 },
  reducers: {
    increment: state => {
      // RTK uses Immer internally, allowing "mutating" logic
      state.count += 1;
    },
    decrement: state => {
      state.count -= 1;
    },
    incrementByAmount: (state, action) => {
      state.count += action.payload;
    }
  }
});

// Export actions
export const { increment, decrement, incrementByAmount } = counterSlice.actions;

// Create store
const store = configureStore({
  reducer: {
    counter: counterSlice.reducer
  }
});

// Use in component
import { increment } from './counterSlice';
import { useDispatch, useSelector } from 'react-redux';

function Counter() {
  const count = useSelector(state => state.counter.count);
  const dispatch = useDispatch();

  return (
    <div>
      <h1>{count}</h1>
      <button onClick={() => dispatch(increment())}>Increment</button>
    </div>
  );
}
`
```2:["$","main",null,{"className":"post-container","children":["$","article",null,{"className":"post-article","children":[null,["$","h1",null,{"className":"post-title","children":"Redux"}],["$","div",null,{"className":"post-content","children":["$","$La",null,{"blocks":[{"id":"block-0","type":"heading_1","content":"A Comprehensive Guide to State Management in JavaScript Applications","properties":{}},{"id":"block-1","type":"heading_2","content":"What is Redux?","properties":{}},{"id":"block-2","type":"paragraph","content":"Redux is a predictable state container for JavaScript applications. It helps you write applications that behave consistently across different environments (client, server, and native), are easy to test, and provide a great developer experience. While Redux is most commonly used with React, it can be integrated with any UI library or framework, including Angular, Vue, and even vanilla JavaScript.","properties":{}},{"id":"block-3","type":"paragraph","content":"Developed by Dan Abramov and Andrew Clark in 2015, Redux was inspired by Facebook's Flux architecture and functional programming concepts from languages like Elm. It quickly became the go-to solution for managing complex application state, especially in large-scale projects.","properties":{}},{"id":"block-4","type":"heading_2","content":"Core Concepts of Redux","properties":{}},{"id":"block-5","type":"paragraph","content":"Redux is built on three fundamental principles:","properties":{}},{"id":"block-6","type":"heading_3","content":"1. Single Source of Truth","properties":{}},{"id":"block-7","type":"paragraph","content":"The entire state of your application is stored in a single JavaScript object tree within a single store. This makes it easier to:","properties":{}},{"id":"block-8","type":"bulleted_list_item","content":"- Debug application state changes","properties":{}},{"id":"block-9","type":"bulleted_list_item","content":"- Implement features like undo/redo","properties":{}},{"id":"block-10","type":"bulleted_list_item","content":"- Persist the app's state","properties":{}},{"id":"block-11","type":"bulleted_list_item","content":"- Create universal applications","properties":{}},{"id":"block-12","type":"heading_3","content":"2. State is Read-Only","properties":{}},{"id":"block-13","type":"paragraph","content":"The only way to change the state is to emit an action, which is a plain JavaScript object describing what happened. This ensures:","properties":{}},{"id":"block-14","type":"bulleted_list_item","content":"- Changes are explicit and traceable","properties":{}},{"id":"block-15","type":"bulleted_list_item","content":"- Views and network callbacks never write directly to the state","properties":{}},{"id":"block-16","type":"bulleted_list_item","content":"- Changes proceed in a strict order, avoiding race conditions","properties":{}},{"id":"block-17","type":"heading_3","content":"3. Changes are Made with Pure Functions","properties":{}},{"id":"block-18","type":"paragraph","content":"Reducers are pure functions that take the previous state and an action, then return the next state. They should never mutate the state directly, but instead create new state objects. This enables:","properties":{}},{"id":"block-19","type":"bulleted_list_item","content":"- Predictable state changes","properties":{}},{"id":"block-20","type":"bulleted_list_item","content":"- Powerful developer tools","properties":{}},{"id":"block-21","type":"bulleted_list_item","content":"- Easier testing","properties":{}},{"id":"block-22","type":"bulleted_list_item","content":"- Time-travel debugging","properties":{}},{"id":"block-23","type":"heading_2","content":"The Redux Flow","properties":{}},{"id":"block-24","type":"paragraph","content":"The Redux data flow follows a strict unidirectional pattern:","properties":{}},{"id":"block-25","type":"numbered_list_item","content":"1. **User Interaction**: A user interacts with the view (e.g., clicking a button)","properties":{}},{"id":"block-26","type":"numbered_list_item","content":"2. **Action Dispatch**: The view dispatches an action (a plain JavaScript object describing what happened)","properties":{}},{"id":"block-27","type":"numbered_list_item","content":"3. **Reducer Processing**: The store passes the current state and action to a reducer function","properties":{}},{"id":"block-28","type":"numbered_list_item","content":"4. **State Update**: The reducer creates a new state based on the action type","properties":{}},{"id":"block-29","type":"numbered_list_item","content":"5. **View Update**: The store notifies all connected components, which re-render with the new state","properties":{}},{"id":"block-30","type":"paragraph","content":"This cycle creates a predictable and trackable flow of data in your application.","properties":{}},{"id":"block-31","type":"heading_2","content":"Basic Redux Example","properties":{}},{"id":"block-32","type":"paragraph","content":"Here's a simple example of Redux in action:","properties":{}},{"id":"block-33","type":"code","content":"```javascript\n`\n// 1. Define action types\nconst INCREMENT = 'INCREMENT';\nconst DECREMENT = 'DECREMENT';\n\n// 2. Create action creators\nfunction increment() {\n  return { type: INCREMENT };\n}\n\nfunction decrement() {\n  return { type: DECREMENT };\n}\n\n// 3. Create a reducer\nfunction counterReducer(state = { count: 0 }, action) {\n  switch (action.type) {\n    case INCREMENT:\n      return { count: state.count + 1 };\n    case DECREMENT:\n      return { count: state.count - 1 };\n    default:\n      return state;\n  }\n}\n\n// 4. Create the Redux store\nimport { createStore } from 'redux';\nconst store = createStore(counterReducer);\n\n// 5. Subscribe to store updates\nstore.subscribe(() => console.log(store.getState()));\n\n// 6. Dispatch actions\nstore.dispatch(increment()); // { count: 1 }\nstore.dispatch(increment()); // { count: 2 }\nstore.dispatch(decrement()); // { count: 1 }\n`\n```","properties":{"language":"$undefined"}},{"id":"block-34","type":"heading_2","content":"Redux with React","properties":{}},{"id":"block-35","type":"paragraph","content":"While Redux can be used with any UI library, it's most commonly paired with React. Here's how to connect Redux to a React application using the official React-Redux library:","properties":{}},{"id":"block-36","type":"code","content":"```javascript\n`\nimport React from 'react';\nimport { Provider, useSelector, useDispatch } from 'react-redux';\nimport { createStore } from 'redux';\n\n// Reducer\nconst counterReducer = (state = { count: 0 }, action) => {\n  switch (action.type) {\n    case 'INCREMENT':\n      return { count: state.count + 1 };\n    case 'DECREMENT':\n      return { count: state.count - 1 };\n    default:\n      return state;\n  }\n};\n\n// Store\nconst store = createStore(counterReducer);\n\n// Component\nfunction Counter() {\n  const count = useSelector(state => state.count);\n  const dispatch = useDispatch();\n\n  return (\n    <div>\n      <h1>Count: {count}</h1>\n      <button onClick={() => dispatch({ type: 'INCREMENT' })}>Increment</button>\n      <button onClick={() => dispatch({ type: 'DECREMENT' })}>Decrement</button>\n    </div>\n  );\n}\n\n// App\nfunction App() {\n  return (\n    <Provider store={store}>\n      <Counter />\n    </Provider>\n  );\n}\n\nexport default App;\n`\n```","properties":{"language":"$undefined"}},{"id":"block-37","type":"heading_2","content":"Redux Middleware","properties":{}},{"id":"block-38","type":"paragraph","content":"Middleware provides a third-party extension point between dispatching an action and the moment it reaches the reducer. It's commonly used for logging, crash reporting, handling asynchronous actions, routing, and more.","properties":{}},{"id":"block-39","type":"paragraph","content":"The most popular Redux middleware libraries include:","properties":{}},{"id":"block-40","type":"heading_3","content":"Redux Thunk","properties":{}},{"id":"block-41","type":"paragraph","content":"Redux Thunk allows action creators to return functions instead of action objects. This enables handling asynchronous operations like API calls:","properties":{}},{"id":"block-42","type":"code","content":"```javascript\n`\nimport { createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\n\n// Async action creator\nfunction fetchUser(id) {\n  return async function(dispatch) {\n    dispatch({ type: 'FETCH_USER_REQUEST' });\n\n    try {\n      const response = await fetch(`/api/users/${id}`);\n      const user = await response.json();\n      dispatch({ type: 'FETCH_USER_SUCCESS', payload: user });\n    } catch (error) {\n      dispatch({ type: 'FETCH_USER_FAILURE', error });\n    }\n  };\n}\n\n// Apply middleware\nconst store = createStore(rootReducer, applyMiddleware(thunk));\n\n// Dispatch async action\nstore.dispatch(fetchUser(123));\n`\n```","properties":{"language":"$undefined"}},{"id":"block-43","type":"heading_3","content":"Redux Saga","properties":{}},{"id":"block-44","type":"paragraph","content":"Redux Saga uses ES6 generators to make asynchronous flows easier to read, write, and test:","properties":{}},{"id":"block-45","type":"code","content":"```javascript\n`\nimport { createStore, applyMiddleware } from 'redux';\nimport createSagaMiddleware from 'redux-saga';\nimport { call, put, takeEvery } from 'redux-saga/effects';\n\n// Saga\nfunction* fetchUser(action) {\n  try {\n    const user = yield call(fetch, `/api/users/${action.payload}`);\n    yield put({ type: 'FETCH_USER_SUCCESS', payload: user });\n  } catch (error) {\n    yield put({ type: 'FETCH_USER_FAILURE', error });\n  }\n}\n\nfunction* userSaga() {\n  yield takeEvery('FETCH_USER_REQUEST', fetchUser);\n}\n\n// Apply middleware\nconst sagaMiddleware = createSagaMiddleware();\nconst store = createStore(rootReducer, applyMiddleware(sagaMiddleware));\nsagaMiddleware.run(userSaga);\n\n// Dispatch action\nstore.dispatch({ type: 'FETCH_USER_REQUEST', payload: 123 });\n`\n```","properties":{"language":"$undefined"}},{"id":"block-46","type":"heading_2","content":"Modern Redux: Redux Toolkit","properties":{}},{"id":"block-47","type":"paragraph","content":"Redux Toolkit (RTK) was introduced as the official, opinionated way to build Redux applications. It simplifies the Redux setup process and includes best practices by default:","properties":{}},{"id":"block-48","type":"code","content":"$b","properties":{"language":"$undefined"}},{"id":"block-49","type":"heading_2","content":"When to Use Redux","properties":{}},{"id":"block-50","type":"paragraph","content":"Redux is a powerful tool, but it's not always necessary. Consider using Redux when:","properties":{}},{"id":"block-51","type":"numbered_list_item","content":"1. **Your application has complex state logic** affecting multiple components","properties":{}},{"id":"block-52","type":"numbered_list_item","content":"2. **The same state is needed in many places** across your application","properties":{}},{"id":"block-53","type":"numbered_list_item","content":"3. **The state is updated frequently** and in complex ways","properties":{}},{"id":"block-54","type":"numbered_list_item","content":"4. **The logic to update state is complex** and involves derived data","properties":{}},{"id":"block-55","type":"numbered_list_item","content":"5. **A large development team** is working on the application","properties":{}},{"id":"block-56","type":"numbered_list_item","content":"6. You need robust **debugging capabilities** for your application state","properties":{}},{"id":"block-57","type":"paragraph","content":"For simpler applications, React's built-in state management (useState, useReducer, useContext) might be sufficient.","properties":{}},{"id":"block-58","type":"heading_2","content":"Redux Best Practices","properties":{}},{"id":"block-59","type":"heading_3","content":"1. Keep State Minimal and Normalized","properties":{}},{"id":"block-60","type":"paragraph","content":"Store the minimum required data and normalize your state to avoid duplication:","properties":{}},{"id":"block-61","type":"code","content":"```javascript\n`\n// ❌ Nested, redundant state\n{\n  users: {\n    user1: { id: 'user1', name: 'John', posts: [{ id: 'post1', title: 'Hello' }] }\n  },\n  posts: {\n    post1: { id: 'post1', title: 'Hello', authorId: 'user1' }\n  }\n}\n\n// ✅ Normalized state\n{\n  users: {\n    byId: {\n      user1: { id: 'user1', name: 'John', postIds: ['post1'] }\n    },\n    allIds: ['user1']\n  },\n  posts: {\n    byId: {\n      post1: { id: 'post1', title: 'Hello', authorId: 'user1' }\n    },\n    allIds: ['post1']\n  }\n}\n`\n```","properties":{"language":"$undefined"}},{"id":"block-62","type":"heading_3","content":"2. Use Action Creators and Constants","properties":{}},{"id":"block-63","type":"paragraph","content":"Define action types as constants and use action creators to create actions:","properties":{}},{"id":"block-64","type":"code","content":"```javascript\n`\n// Action types\nconst ADD_TODO = 'ADD_TODO';\nconst TOGGLE_TODO = 'TOGGLE_TODO';\n\n// Action creators\nfunction addTodo(text) {\n  return { type: ADD_TODO, payload: text };\n}\n\nfunction toggleTodo(id) {\n  return { type: TOGGLE_TODO, payload: id };\n}\n`\n```","properties":{"language":"$undefined"}},{"id":"block-65","type":"heading_3","content":"3. Write Pure Reducers","properties":{}},{"id":"block-66","type":"paragraph","content":"Ensure your reducers are pure functions that don't mutate state:","properties":{}},{"id":"block-67","type":"code","content":"```javascript\n`\n// ❌ Mutating state (bad)\nfunction badReducer(state, action) {\n  if (action.type === 'ADD_TODO') {\n    state.todos.push(action.payload); // Directly mutates state\n    return state;\n  }\n  return state;\n}\n\n// ✅ Creating new state (good)\nfunction goodReducer(state, action) {\n  if (action.type === 'ADD_TODO') {\n    return {\n      ...state,\n      todos: [...state.todos, action.payload]\n    };\n  }\n  return state;\n}\n`\n```","properties":{"language":"$undefined"}},{"id":"block-68","type":"heading_3","content":"4. Split Reducers with combineReducers","properties":{}},{"id":"block-69","type":"paragraph","content":"As your app grows, split reducers into smaller functions responsible for specific parts of the state:","properties":{}},{"id":"block-70","type":"code","content":"```javascript\n`\nimport { combineReducers } from 'redux';\n\nconst todosReducer = (state = [], action) => {\n  // handle todo-related actions\n};\n\nconst visibilityReducer = (state = 'SHOW_ALL', action) => {\n  // handle visibility-related actions\n};\n\nconst rootReducer = combineReducers({\n  todos: todosReducer,\n  visibility: visibilityReducer\n});\n`\n```","properties":{"language":"$undefined"}},{"id":"block-71","type":"heading_2","content":"Common Redux Patterns","properties":{}},{"id":"block-72","type":"heading_3","content":"1. Request Status Handling","properties":{}},{"id":"block-73","type":"paragraph","content":"Track the status of async operations:","properties":{}},{"id":"block-74","type":"code","content":"```javascript\n`\n{\n  users: {\n    data: [],\n    status: 'idle', // 'idle' | 'loading' | 'succeeded' | 'failed'\n    error: null\n  }\n}\n`\n```","properties":{"language":"$undefined"}},{"id":"block-75","type":"heading_3","content":"2. Feature-Based Organization","properties":{}},{"id":"block-76","type":"paragraph","content":"Organize code by feature rather than by function type:","properties":{}},{"id":"block-77","type":"code","content":"```plain text\n`\nsrc/\n  features/\n    todos/\n      todosSlice.js\n      TodoList.js\n      TodoItem.js\n    users/\n      usersSlice.js\n      UsersList.js\n  app/\n    store.js\n    App.js\n`\n```","properties":{"language":"$undefined"}},{"id":"block-78","type":"heading_3","content":"3. Selector Functions","properties":{}},{"id":"block-79","type":"paragraph","content":"Use selector functions to extract data from the store:","properties":{}},{"id":"block-80","type":"code","content":"```javascript\n`\n// Selector\nconst getTodoById = (state, todoId) =>\n  state.todos.find(todo => todo.id === todoId);\n\n// In component\nconst todo = useSelector(state => getTodoById(state, props.todoId));\n`\n```","properties":{"language":"$undefined"}},{"id":"block-81","type":"heading_2","content":"Conclusion","properties":{}},{"id":"block-82","type":"paragraph","content":"Redux provides a powerful, predictable state management solution for JavaScript applications. While it introduces some complexity, the benefits of centralized state management, predictable data flow, and powerful debugging capabilities make it an excellent choice for medium to large applications.","properties":{}},{"id":"block-83","type":"paragraph","content":"With the introduction of Redux Toolkit, many of the historical pain points of Redux have been addressed, making it more accessible and reducing boilerplate code. Whether you're building a complex single-page application or just want more predictable state management, Redux offers a battle-tested solution with a strong ecosystem and community support.","properties":{}},{"id":"block-84","type":"paragraph","content":"As with any tool, the key is to understand when Redux is the right choice for your project and to follow the established patterns and best practices to get the most benefit from your implementation.","properties":{}}]}]}],["$","div",null,{"className":"post-meta","children":[["$","div",null,{"className":"post-date","children":[["$","svg",null,{"xmlns":"http://www.w3.org/2000/svg","width":24,"height":24,"viewBox":"0 0 24 24","fill":"none","stroke":"currentColor","strokeWidth":2,"strokeLinecap":"round","strokeLinejoin":"round","className":"lucide lucide-calendar h-4 w-4","children":[["$","rect","eu3xkr",{"width":"18","height":"18","x":"3","y":"4","rx":"2","ry":"2"}],["$","line","m3sa8f",{"x1":"16","x2":"16","y1":"2","y2":"6"}],["$","line","18kwsl",{"x1":"8","x2":"8","y1":"2","y2":"6"}],["$","line","xt86sb",{"x1":"3","x2":"21","y1":"10","y2":"10"}],"$undefined"]}],["$","span",null,{"children":"April 22, 2025"}]]}],["$","div",null,{"className":"post-tags","children":[["$","svg",null,{"xmlns":"http://www.w3.org/2000/svg","width":24,"height":24,"viewBox":"0 0 24 24","fill":"none","stroke":"currentColor","strokeWidth":2,"strokeLinecap":"round","strokeLinejoin":"round","className":"lucide lucide-tag h-4 w-4","children":[["$","path","14b2ls",{"d":"M12 2H2v10l9.29 9.29c.94.94 2.48.94 3.42 0l6.58-6.58c.94-.94.94-2.48 0-3.42L12 2Z"}],["$","path","7u93v4",{"d":"M7 7h.01"}],"$undefined"]}],["$","div",null,{"className":"flex gap-2","children":[["$","span","react",{"className":"post-tag","children":["#","react"]}],["$","span","redux",{"className":"post-tag","children":["#","redux"]}],["$","span","state-management",{"className":"post-tag","children":["#","state-management"]}],["$","span","JavaScript",{"className":"post-tag","children":["#","JavaScript"]}]]}]]}]]}]]}]}]
